import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Progress } from "@/components/ui/progress";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import { useAuth } from "@/contexts/AuthContext";
import { useCheckLimit } from "@/hooks/useCheckLimit";
import { Plus, User, Building, Calendar, Mic, Monitor, Link, Users, History, ChevronLeft, ChevronRight, Check } from "lucide-react";
import { entryApplicationSchema, type EntryApplicationData } from "@shared/schema";
import { useTranslation } from "react-i18next";

interface EntryApplicationModalProps {
  children?: React.ReactNode;
  isOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
}

const STEPS = [
  { title: "–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", icon: User },
  { title: "–í—ã–±–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞", icon: Building },
  { title: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è", icon: Users },
  { title: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", icon: Monitor },
  { title: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", icon: History },
  { title: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", icon: Check }
];

export function EntryApplicationModal({ children, isOpen, onOpenChange }: EntryApplicationModalProps) {
  const [internalOpen, setInternalOpen] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  const [departmentDescriptionValue, setDepartmentDescriptionValue] = useState(''); // –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const open = typeof isOpen === 'boolean' ? isOpen : internalOpen;
  const setOpen = onOpenChange || setInternalOpen;
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { t } = useTranslation();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞—è–≤–æ–∫
  const { isLimitReached = false, isLoading: isLimitLoading = false, reason: limitReason = '', refetch: refetchLimits } = useCheckLimit('entry');
  
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  useEffect(() => {
    console.log('üîç EntryApplicationModal - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤:', {
      isLimitReached,
      isLimitLoading,
      limitReason,
      user: !!user
    });
  }, [isLimitReached, isLimitLoading, limitReason, user]);

  const { data: departments = [] } = useQuery<any[]>({
    queryKey: ['/api/departments']
  });

  const form = useForm<EntryApplicationData>({
    resolver: zodResolver(entryApplicationSchema),
    defaultValues: {
      fullName: "",
      birthDate: "",
      departmentId: 0,
      departmentDescription: "",
      motivation: "",
      hasMicrophone: false,
      meetsSystemRequirements: false,
      systemRequirementsLink: "",
      sourceOfInformation: "",
      inOtherCommunities: false,
      wasInOtherCommunities: false,
      otherCommunitiesDetails: ""
    }
  });

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–Ω–∞—á–µ–Ω–∏—è—Ö —Ñ–æ—Ä–º—ã
  useEffect(() => {
    console.log('üîç EntryApplicationModal - –¢–µ–∫—É—â–∏–π —à–∞–≥:', currentStep);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è —à–∞–≥–∞ 2
    if (currentStep === 2) {
      console.log('üîç DEBUG Step 2 - –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ departmentDescription:', departmentDescriptionValue);
      console.log('üîç DEBUG Step 2 - birthDate:', form.getValues('birthDate'));
    }
  }, [currentStep]); // –£–±–∏—Ä–∞–µ–º departmentDescriptionValue –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const mutation = useMutation({
    mutationFn: async (data: EntryApplicationData) => {
      const applicationData = {
        type: "entry",
        data: {
          ...data,
          submittedAt: new Date().toISOString()
        }
      };
      
      const response = await apiRequest('POST', '/api/applications', applicationData);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/applications'] });
      if (refetchLimits) refetchLimits();
      toast({
        title: t('entry.success', 'Application submitted'),
        description: t('entry.success_desc', 'Your entry application has been successfully sent for review')
      });
      setOpen(false);
      form.reset();
      setCurrentStep(1);
    },
    onError: (error: any) => {
      toast({
        title: t('entry.error', 'Error'),
        description: error.message || t('entry.error_desc', 'Failed to submit application'),
        variant: "destructive"
      });
    }
  });

  const onSubmit = (data: EntryApplicationData) => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è departmentDescription
    const finalData = {
      ...data,
      departmentDescription: departmentDescriptionValue
    };
    console.log('üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º:', finalData);
    mutation.mutate(finalData);
  };

  const handleNext = async () => {
    console.log('üîç handleNext - –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    let fieldsToValidate: (keyof EntryApplicationData)[] = [];
    
    switch (currentStep) {
      case 1:
        fieldsToValidate = ['fullName', 'birthDate'];
        break;
      case 2:
        fieldsToValidate = ['departmentId', 'departmentDescription'];
        break;
      case 3:
        fieldsToValidate = ['motivation'];
        break;
      case 4:
        fieldsToValidate = ['hasMicrophone', 'meetsSystemRequirements'];
        break;
      case 5:
        fieldsToValidate = ['sourceOfInformation', 'inOtherCommunities', 'wasInOtherCommunities'];
        break;
      default:
        break;
    }
    
    console.log('üîç handleNext - –ü–æ–ª—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', fieldsToValidate);
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    const isValid = await form.trigger(fieldsToValidate);
    console.log('üîç handleNext - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', isValid);
    
    if (isValid && currentStep < STEPS.length) {
      console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É:', currentStep + 1);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
      if (currentStep === 1) {
        // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —à–∞–≥—É 2 –æ—á–∏—â–∞–µ–º –ø–æ–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
        form.setValue('departmentId', 0);
        form.setValue('departmentDescription', '');
        // –û—á–∏—â–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setDepartmentDescriptionValue('');
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
        form.clearErrors(['departmentId', 'departmentDescription']);
        
        console.log('üîç –û—á–∏—â–µ–Ω—ã –ø–æ–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞');
      }
      
      setCurrentStep(currentStep + 1);
    } else {
      console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥');
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const errors = form.formState.errors;
      console.log('üîç –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', errors);
    }
  };

  const handlePrev = () => {
    if (currentStep > 1) {
      console.log('üîç –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É:', currentStep - 1);
      
      // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞–∑–∞–¥
      if (currentStep === 2) {
        // –ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞–∑–∞–¥ —Å —à–∞–≥–∞ 2 –æ—á–∏—â–∞–µ–º –ø–æ–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
        form.setValue('departmentId', 0);
        form.setValue('departmentDescription', '');
        setDepartmentDescriptionValue('');
        console.log('üîç –û—á–∏—â–µ–Ω—ã –ø–æ–ª—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞–∑–∞–¥');
      }
      
      setCurrentStep(currentStep - 1);
    }
  };

  const handleClose = () => {
    console.log('üîç –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
    setOpen(false);
    setCurrentStep(1);
    form.reset();
  };

  const handleOpen = () => {
    console.log('üîç –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
    form.reset({
      fullName: "",
      birthDate: "",
      departmentId: 0,
      departmentDescription: "",
      motivation: "",
      hasMicrophone: false,
      meetsSystemRequirements: false,
      systemRequirementsLink: "",
      sourceOfInformation: "",
      inOtherCommunities: false,
      wasInOtherCommunities: false,
      otherCommunitiesDetails: ""
    });
    
    // –û—á–∏—â–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setDepartmentDescriptionValue('');
    
    setCurrentStep(1);
    setOpen(true);
  };

  const sourceOptions = [
    { value: "discord", label: "Discord" },
    { value: "vk", label: "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ" },
    { value: "friend", label: "–û—Ç –¥—Ä—É–∑–µ–π" },
    { value: "advertisement", label: "–†–µ–∫–ª–∞–º–∞" },
    { value: "other", label: "–î—Ä—É–≥–æ–µ" }
  ];

  const progress = (currentStep / STEPS.length) * 100;

  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return (
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center space-x-2">
              <User className="h-4 w-4" />
              <span>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
            </h3>
            
            <FormField
              control={form.control}
              name="fullName"
              render={({ field }) => (
                <FormItem key="fullName-field">
                  <FormLabel>–§–ò–û *</FormLabel>
                  <FormControl>
                    <Input 
                      key="fullName-input"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è" 
                      value={field.value || ""}
                      onChange={(e) => field.onChange(e.target.value)}
                      onBlur={field.onBlur}
                      name={field.name}
                      ref={field.ref}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="birthDate"
              render={({ field }) => {
                // –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
                console.log('üîç DEBUG birthDate render:', {
                  fieldValue: field.value,
                  fieldName: field.name,
                  currentStep
                });
                
                return (
                  <FormItem key="birthDate-field">
                    <FormLabel>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è *</FormLabel>
                    <FormControl>
                      <Input 
                        key="birthDate-input"
                        type="date" 
                        value={field.value || ""}
                        onChange={(e) => {
                          console.log('üîç DEBUG birthDate onChange:', e.target.value);
                          field.onChange(e.target.value);
                        }}
                        onBlur={field.onBlur}
                        name={field.name}
                        ref={field.ref}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                );
              }}
            />
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center space-x-2">
              <Building className="h-4 w-4" />
              <span>–í—ã–±–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞</span>
            </h3>
            
            <FormField
              control={form.control}
              name="departmentId"
              render={({ field }) => (
                <FormItem key="departmentId-field">
                  <FormLabel>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç *</FormLabel>
                  <Select 
                    onValueChange={(value) => field.onChange(parseInt(value))} 
                    value={field.value?.toString() || ""}
                  >
                    <FormControl>
                      <SelectTrigger key="departmentId-select">
                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç..." />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {departments.map((dept) => (
                        <SelectItem key={dept.id} value={dept.id.toString()}>
                          {dept.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="departmentDescription"
              render={({ field }) => {
                // –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º React Hook Form –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—è
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                
                // –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
                console.log('üîç DEBUG departmentDescription render:', {
                  fieldValue: field.value,
                  separateState: departmentDescriptionValue,
                  currentStep
                });
                
                return (
                  <FormItem key="departmentDescription-field">
                    <FormLabel>–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç? *</FormLabel>
                    <FormControl>
                      <Textarea 
                        key={`departmentDescription-textarea-${currentStep}-${Date.now()}`}
                        placeholder="–û–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–¥–∞—á–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞..." 
                        className="min-h-[80px]"
                        value={departmentDescriptionValue}
                        onChange={(e) => {
                          console.log('üîç DEBUG departmentDescription onChange:', e.target.value);
                          setDepartmentDescriptionValue(e.target.value);
                          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å React Hook Form –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                          field.onChange(e.target.value);
                        }}
                        onBlur={() => {
                          // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å React Hook Form –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞
                          field.onChange(departmentDescriptionValue);
                        }}
                        name={field.name}
                        ref={field.ref}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                );
              }}
            />
          </div>
        );

      case 3:
        return (
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center space-x-2">
              <Users className="h-4 w-4" />
              <span>–ú–æ—Ç–∏–≤–∞—Ü–∏—è</span>
            </h3>
            
            <FormField
              control={form.control}
              name="motivation"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ—Ç –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç? *</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –º–æ—Ç–∏–≤–∞—Ö –∏ —Ü–µ–ª—è—Ö..." 
                      className="min-h-[100px]"
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        );

      case 4:
        return (
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center space-x-2">
              <Monitor className="h-4 w-4" />
              <span>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</span>
            </h3>
            
            <FormField
              control={form.control}
              name="hasMicrophone"
              render={({ field }) => (
                <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                  <FormControl>
                    <Checkbox
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <div className="space-y-1 leading-none">
                    <FormLabel>–£ –º–µ–Ω—è –µ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–Ω—ã–π –º–∏–∫—Ä–æ—Ñ–æ–Ω *</FormLabel>
                    <p className="text-sm text-muted-foreground">
                      –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                    </p>
                  </div>
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="meetsSystemRequirements"
              render={({ field }) => (
                <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                  <FormControl>
                    <Checkbox
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <div className="space-y-1 leading-none">
                    <FormLabel>–ú–æ–π –ü–ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º FiveM *</FormLabel>
                    <p className="text-sm text-muted-foreground">
                      –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
                    </p>
                  </div>
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="systemRequirementsLink"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –ü–ö</FormLabel>
                  <FormControl>
                    <Input placeholder="https://..." {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        );

      case 5:
        return (
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center space-x-2">
              <History className="h-4 w-4" />
              <span>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
            </h3>
            
            <FormField
              control={form.control}
              name="sourceOfInformation"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –ø—Ä–æ –Ω–∞—Å? *</FormLabel>
                  <Select onValueChange={field.onChange} value={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫..." />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {sourceOptions.map((option) => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="inOtherCommunities"
              render={({ field }) => (
                <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                  <FormControl>
                    <Checkbox
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <div className="space-y-1 leading-none">
                    <FormLabel>–°–æ—Å—Ç–æ–∏—Ç–µ –ª–∏ –≤—ã –≤ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?</FormLabel>
                  </div>
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="wasInOtherCommunities"
              render={({ field }) => (
                <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                  <FormControl>
                    <Checkbox
                      checked={field.value}
                      onCheckedChange={field.onChange}
                    />
                  </FormControl>
                  <div className="space-y-1 leading-none">
                    <FormLabel>–°–æ—Å—Ç–æ—è–ª–∏ –ª–∏ –≤—ã –≤ –¥—Ä—É–≥–∏—Ö FiveM-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö —Ä–∞–Ω–µ–µ?</FormLabel>
                  </div>
                </FormItem>
              )}
            />
            
            <FormField
              control={form.control}
              name="otherCommunitiesDetails"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>–î–µ—Ç–∞–ª–∏ –æ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)</FormLabel>
                  <FormControl>
                    <Textarea 
                      placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –≤ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö..." 
                      className="min-h-[80px]"
                      {...field} 
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
          </div>
        );

      case 6:
        return (
          <div className="space-y-4">
            <h3 className="text-lg font-medium flex items-center space-x-2">
              <Check className="h-4 w-4" />
              <span>–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö</span>
            </h3>
            
            <div className="bg-gray-50 p-4 rounded-lg space-y-3">
              <div>
                <span className="font-medium">–§–ò–û:</span> {form.watch('fullName')}
              </div>
              <div>
                <span className="font-medium">–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</span> {form.watch('birthDate')}
              </div>
              <div>
                <span className="font-medium">–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:</span> {
                  departments.find(d => d.id === form.watch('departmentId'))?.name
                }
              </div>
              <div>
                <span className="font-medium">–ú–∏–∫—Ä–æ—Ñ–æ–Ω:</span> {form.watch('hasMicrophone') ? '–î–∞' : '–ù–µ—Ç'}
              </div>
              <div>
                <span className="font-medium">–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</span> {form.watch('meetsSystemRequirements') ? '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç' : '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç'}
              </div>
            </div>
            
            <p className="text-sm text-gray-600">
              –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.
            </p>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <>
      {children ? (
        <Dialog open={open} onOpenChange={handleClose}>
          <DialogTrigger asChild>
            {children}
          </DialogTrigger>
          <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
            {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ */}
          </DialogContent>
        </Dialog>
      ) : (
        <>
          <button 
            className="w-full flex items-center justify-between p-3 rounded-lg border border-border hover:bg-accent/50 transition-colors"
            disabled={false}
            title={isLimitReached ? (limitReason || '') : ''}
            onClick={() => {
              console.log('üîç –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞!');
              setOpen(true);
            }}
          >
            <div className="flex items-center space-x-3">
              <Plus className="h-4 w-4 text-primary" />
              <span className="text-sm font-medium text-foreground">
                {t('entry.submit_application', 'Submit Entry Application')}
              </span>
            </div>
          </button>
          
          <Dialog open={open} onOpenChange={handleClose}>
            <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
      
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –æ—Ç–¥–µ–ª—å–Ω–æ */}
            {isLimitReached && (
              <div className="mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-center justify-between">
                  <div className="text-xs text-yellow-800">
                    {limitReason || t('entry.limit_reached', 'Application limit reached')}
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={() => refetchLimits && refetchLimits()}
                    disabled={isLimitLoading}
                    className="text-xs h-6 px-2"
                  >
                    {isLimitLoading ? (
                      <div className="flex items-center space-x-1">
                        <div className="animate-spin rounded-full h-3 w-3 border-b border-current"></div>
                        <span>{t('entry.updating', 'Updating...')}</span>
                      </div>
                    ) : (
                      t('entry.refresh', 'Refresh')
                    )}
                  </Button>
                </div>
              </div>
            )}
            
            <DialogHeader>
              <DialogTitle className="flex items-center space-x-2">
                <User className="h-5 w-5" />
                <span>{t('entry.title', 'Community Entry Application')}</span>
              </DialogTitle>
              
              {/* Progress bar */}
              <div className="space-y-2">
                <div className="flex justify-between text-sm text-gray-600">
                  <span>{t('entry.step', 'Step')} {currentStep} {t('entry.of', 'of')} {STEPS.length}</span>
                  <span>{Math.round(progress)}%</span>
                </div>
                <Progress value={progress} className="h-2" />
              </div>
            </DialogHeader>
            
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                {renderStepContent()}
                
                {/* Navigation buttons */}
                <div className="flex justify-between pt-4">
                  <Button
                    type="button"
                    variant="outline"
                    onClick={handlePrev}
                    disabled={currentStep === 1}
                    className="flex items-center space-x-2"
                  >
                    <ChevronLeft className="h-4 w-4" />
                    <span>{t('entry.back', 'Back')}</span>
                  </Button>
                  
                  <div className="flex space-x-2">
                    {currentStep < STEPS.length ? (
                      <Button
                        type="button"
                        onClick={() => {
                          console.log('üîç –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ" –Ω–∞–∂–∞—Ç–∞!');
                          handleNext();
                        }}
                        className="flex items-center space-x-2"
                      >
                        <span>{t('entry.next', 'Next')}</span>
                        <ChevronRight className="h-4 w-4" />
                      </Button>
                    ) : (
                      <Button
                        type="submit"
                        disabled={mutation.isPending}
                        className="flex items-center space-x-2"
                      >
                        {mutation.isPending ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-b border-current"></div>
                            <span>{t('entry.submitting', 'Submitting...')}</span>
                          </>
                        ) : (
                          <>
                            <Check className="h-4 w-4" />
                            <span>{t('entry.submit', 'Submit Application')}</span>
                          </>
                        )}
                      </Button>
                    )}
                  </div>
                </div>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
        </>
      )}
    </>
  );
} 