import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useMutation, useQueryClient, useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useCheckLimit } from "@/hooks/useCheckLimit";
import { Plus, User, Building, Calendar, Mic, Monitor, Link, Users, History } from "lucide-react";
import { entryApplicationSchema, type EntryApplicationData } from "@shared/schema";

interface EntryApplicationModalProps {
  children?: React.ReactNode;
  isOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
}

export function EntryApplicationModal({ children, isOpen, onOpenChange }: EntryApplicationModalProps) {
  const [internalOpen, setInternalOpen] = useState(false);
  const open = typeof isOpen === 'boolean' ? isOpen : internalOpen;
  const setOpen = onOpenChange || setInternalOpen;
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –∑–∞—è–≤–æ–∫
  const { isLimitReached, isLoading: isLimitLoading, reason: limitReason, refetch: refetchLimits } = useCheckLimit('entry');

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('üîç EntryApplicationModal - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤:', {
    isLimitReached,
    isLimitLoading,
    limitReason
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
  const handleRefreshLimits = () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤...');
    refetchLimits();
  };

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
  const { data: departments = [] } = useQuery<any[]>({
    queryKey: ['/api/departments'],
  });

  const form = useForm<EntryApplicationData>({
    resolver: zodResolver(entryApplicationSchema),
    defaultValues: {
      fullName: "",
      birthDate: "",
      departmentId: 0,
      departmentDescription: "",
      motivation: "",
      hasMicrophone: false,
      meetsSystemRequirements: false,
      systemRequirementsLink: "",
      sourceOfInformation: "",
      inOtherCommunities: false,
      wasInOtherCommunities: false,
      otherCommunitiesDetails: ""
    }
  });

  const mutation = useMutation({
    mutationFn: async (data: EntryApplicationData) => {
      const applicationData = {
        type: "entry",
        data: {
          ...data,
          submittedAt: new Date().toISOString()
        }
      };
      
      const response = await apiRequest('POST', '/api/applications', applicationData);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/applications'] });
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
      refetchLimits();
      toast({
        title: "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞",
        description: "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"
      });
      setOpen(false);
      form.reset();
    },
    onError: (error: any) => {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
        variant: "destructive"
      });
    }
  });

  const onSubmit = (data: EntryApplicationData) => {
    mutation.mutate(data);
  };

  const sourceOptions = [
    { value: "discord", label: "Discord" },
    { value: "vk", label: "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ" },
    { value: "friend", label: "–û—Ç –¥—Ä—É–∑–µ–π" },
    { value: "advertisement", label: "–†–µ–∫–ª–∞–º–∞" },
    { value: "other", label: "–î—Ä—É–≥–æ–µ" }
  ];

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {children || (
          <div className="w-full">
            <Button 
              className="w-full flex items-center justify-between p-3 rounded-lg border border-gray-200 hover:bg-gray-50 transition-colors"
              disabled={isLimitLoading || isLimitReached}
              title={isLimitReached ? limitReason : ''}
            >
              <div className="flex items-center space-x-3">
                <Plus className="h-4 w-4 text-primary" />
                <span className="text-sm font-medium text-gray-900">
                  {isLimitLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤...' : 
                   isLimitReached ? '–õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω' : 
                   '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ'}
                </span>
              </div>
            </Button>
            
            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
            {isLimitReached && (
              <div className="mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded-lg">
                <div className="flex items-center justify-between">
                  <div className="text-xs text-yellow-800">
                    {limitReason || '–õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω'}
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    onClick={handleRefreshLimits}
                    disabled={isLimitLoading}
                    className="text-xs h-6 px-2"
                  >
                    {isLimitLoading ? (
                      <div className="flex items-center space-x-1">
                        <div className="animate-spin rounded-full h-3 w-3 border-b border-current"></div>
                        <span>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</span>
                      </div>
                    ) : (
                      '–û–±–Ω–æ–≤–∏—Ç—å'
                    )}
                  </Button>
                </div>
              </div>
            )}
          </div>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <User className="h-5 w-5" />
            <span>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ</span>
          </DialogTitle>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            {/* –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center space-x-2">
                <User className="h-4 w-4" />
                <span>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
              </h3>
              
              <FormField
                control={form.control}
                name="fullName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–§–ò–û *</FormLabel>
                    <FormControl>
                      <Input placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="birthDate"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è *</FormLabel>
                    <FormControl>
                      <Input type="date" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* –í—ã–±–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center space-x-2">
                <Building className="h-4 w-4" />
                <span>–í—ã–±–æ—Ä –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞</span>
              </h3>
              
              <FormField
                control={form.control}
                name="departmentId"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç *</FormLabel>
                    <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç..." />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {departments.map((dept) => (
                          <SelectItem key={dept.id} value={dept.id.toString()}>
                            {dept.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="departmentDescription"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç? *</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="–û–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∑–∞–¥–∞—á–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞..." 
                        className="min-h-[80px]"
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* –ú–æ—Ç–∏–≤–∞—Ü–∏—è */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium">–ú–æ—Ç–∏–≤–∞—Ü–∏—è</h3>
              
              <FormField
                control={form.control}
                name="motivation"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ? *</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö —Ü–µ–ª—è—Ö –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏..." 
                        className="min-h-[100px]"
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center space-x-2">
                <Monitor className="h-4 w-4" />
                <span>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</span>
              </h3>
              
              <FormField
                control={form.control}
                name="hasMicrophone"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel className="flex items-center space-x-2">
                        <Mic className="h-4 w-4" />
                        <span>–£ –≤–∞—Å –µ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω? *</span>
                      </FormLabel>
                    </div>
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="meetsSystemRequirements"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>
                        –í–∞—à –∫–æ–º–ø—å—é—Ç–µ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º? *
                      </FormLabel>
                    </div>
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="systemRequirementsLink"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className="flex items-center space-x-2">
                      <Link className="h-4 w-4" />
                      <span>–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è *</span>
                    </FormLabel>
                    <FormControl>
                      <Input 
                        type="url" 
                        placeholder="https://example.com/requirements" 
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium flex items-center space-x-2">
                <Users className="h-4 w-4" />
                <span>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ</span>
              </h3>
              
              <FormField
                control={form.control}
                name="sourceOfInformation"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ? *</FormLabel>
                    <Select onValueChange={field.onChange} value={field.value}>
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫..." />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {sourceOptions.map((option) => (
                          <SelectItem key={option.value} value={option.value}>
                            {option.label}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="inOtherCommunities"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel>
                        –°–æ—Å—Ç–æ–∏—Ç–µ –ª–∏ –≤—ã –≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö? *
                      </FormLabel>
                    </div>
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="wasInOtherCommunities"
                render={({ field }) => (
                  <FormItem className="flex flex-row items-start space-x-3 space-y-0">
                    <FormControl>
                      <Checkbox
                        checked={field.value}
                        onCheckedChange={field.onChange}
                      />
                    </FormControl>
                    <div className="space-y-1 leading-none">
                      <FormLabel className="flex items-center space-x-2">
                        <History className="h-4 w-4" />
                        <span>–°–æ—Å—Ç–æ—è–ª–∏ –ª–∏ —Ä–∞–Ω–µ–µ –≤ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö? *</span>
                      </FormLabel>
                    </div>
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="otherCommunitiesDetails"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>–î–µ—Ç–∞–ª–∏ –æ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö</FormLabel>
                    <FormControl>
                      <Textarea 
                        placeholder="–ï—Å–ª–∏ –¥–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ..." 
                        className="min-h-[80px]"
                        {...field} 
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="flex justify-end space-x-3 pt-6 border-t">
              <Button type="button" variant="outline" onClick={() => setOpen(false)}>
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button type="submit" disabled={mutation.isPending}>
                {mutation.isPending ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
} 