const { config } = require('dotenv');
const { Pool } = require('pg');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
config({ path: path.resolve(__dirname, '.env') });

async function testNewConnection() {
  try {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å DB_PASSWORD...');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –®–ê–ë–õ–û–ù —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    let connectionStringTemplate = process.env.DATABASE_URL;
    console.log('üìã DATABASE_URL template:', connectionStringTemplate ? '–ù–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    const dbPassword = process.env.DB_PASSWORD;
    console.log('üîë DB_PASSWORD:', dbPassword ? '–ù–∞–π–¥–µ–Ω' : '–ù–ï –Ω–∞–π–¥–µ–Ω');
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –º–µ—Å—Ç–µ
    if (!connectionStringTemplate || !dbPassword) {
      throw new Error("DATABASE_URL –∏ DB_PASSWORD –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!");
    }
    
    // 4. –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ —à–∞–±–ª–æ–Ω
    const connectionString = connectionStringTemplate.replace(
      '[YOUR-PASSWORD]', 
      encodeURIComponent(dbPassword)
    );
    
    console.log('üîó Final connection string (masked):', connectionString.replace(/:(.*)@/, ':***@'));
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const pool = new Pool({
      connectionString: connectionString,
      ssl: { rejectUnauthorized: false }
    });
    
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const result = await client.query('SELECT NOW() as current_time');
    console.log('‚è∞ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –ë–î:', result.rows[0].current_time);
    
    client.release();
    await pool.end();
    
    console.log('üéâ –¢–µ—Å—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    process.exit(1);
  }
}

testNewConnection(); 