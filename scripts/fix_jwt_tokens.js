import jwt from 'jsonwebtoken'
import { execSync } from 'child_process'

// –ü–æ–ª—É—á–∞–µ–º JWT secret –∏–∑ Supabase
try {
    const output = execSync('npx supabase status', { encoding: 'utf8' })
    const jwtSecretMatch = output.match(/JWT secret: (.+)/)
    const JWT_SECRET = jwtSecretMatch ? jwtSecretMatch[1].trim() : null
    
    if (!JWT_SECRET) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å JWT secret –∏–∑ Supabase')
    }
    
    console.log('‚úÖ JWT Secret –Ω–∞–π–¥–µ–Ω:', JWT_SECRET)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º anon –∫–ª—é—á —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const anonPayload = {
        iss: 'supabase',
        ref: 'localhost',
        role: 'anon',
        iat: Math.floor(Date.now() / 1000),
        exp: Math.floor(Date.now() / 1000) + (10 * 365 * 24 * 60 * 60) // 10 –ª–µ—Ç
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º service_role –∫–ª—é—á —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const servicePayload = {
        iss: 'supabase',
        ref: 'localhost',
        role: 'service_role',
        iat: Math.floor(Date.now() / 1000),
        exp: Math.floor(Date.now() / 1000) + (10 * 365 * 24 * 60 * 60) // 10 –ª–µ—Ç
    }
    
    const anonToken = jwt.sign(anonPayload, JWT_SECRET)
    const serviceToken = jwt.sign(servicePayload, JWT_SECRET)
    
    console.log('\nüîë –ù–æ–≤—ã–µ JWT —Ç–æ–∫–µ–Ω—ã:')
    console.log('\n# –û–±–Ω–æ–≤–∏—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª:')
    console.log('SUPABASE_URL=http://localhost:54321')
    console.log('SUPABASE_ANON_KEY=' + anonToken)
    console.log('SUPABASE_SERVICE_ROLE_KEY=' + serviceToken)
    console.log('JWT_SECRET=' + JWT_SECRET)
    console.log('\nVITE_SUPABASE_URL=http://localhost:54321')
    console.log('VITE_SUPABASE_ANON_KEY=' + anonToken)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–æ–≤
    try {
        const decodedAnon = jwt.verify(anonToken, JWT_SECRET)
        const decodedService = jwt.verify(serviceToken, JWT_SECRET)
        console.log('\n‚úÖ –¢–æ–∫–µ–Ω—ã –≤–∞–ª–∏–¥–Ω—ã')
        console.log('Anon role:', decodedAnon.role)
        console.log('Service role:', decodedService.role)
    } catch (verifyError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', verifyError.message)
    }
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
}
