import { Pool } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

async function fixDevSchemaConstraint() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –í DEV_SCHEMA...');
  console.log('='.repeat(50));
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.DATABASE_URL?.includes('supabase.com') ? { rejectUnauthorized: false } : false,
  });

  try {
    const client = await pool.connect();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ–∏—Å–∫–∞
    await client.query('SET search_path TO dev_schema, public');
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
    const constraintCheck = await client.query(`
      SELECT constraint_name 
      FROM information_schema.table_constraints 
      WHERE table_schema = 'dev_schema' 
      AND table_name = 'users' 
      AND constraint_name = 'users_api_token_unique'
    `);
    
    if (constraintCheck.rows.length > 0) {
      console.log('‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ users_api_token_unique —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è api_token...');
      
      try {
        await client.query(`
          ALTER TABLE "users" ADD CONSTRAINT "users_api_token_unique" UNIQUE("api_token")
        `);
        console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        if (error.message.includes('duplicate key value')) {
          console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è api_token, –æ—á–∏—â–∞–µ–º...');
          
          // –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
          await client.query(`
            UPDATE "users" SET "api_token" = NULL WHERE "api_token" IN (
              SELECT "api_token" FROM "users" 
              WHERE "api_token" IS NOT NULL 
              GROUP BY "api_token" 
              HAVING COUNT(*) > 1
            )
          `);
          
          // –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
          await client.query(`
            ALTER TABLE "users" ADD CONSTRAINT "users_api_token_unique" UNIQUE("api_token")
          `);
          console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
        } else {
          throw error;
        }
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...');
    
    const usersColumns = await client.query(`
      SELECT column_name, data_type, is_nullable, column_default 
      FROM information_schema.columns 
      WHERE table_schema = 'dev_schema' 
      AND table_name = 'users' 
      AND column_name IN ('has_2fa', 'is_dark_theme', 'sound_settings', 'api_token')
      ORDER BY column_name
    `);
    
    const charsColumns = await client.query(`
      SELECT column_name, data_type, is_nullable, column_default 
      FROM information_schema.columns 
      WHERE table_schema = 'dev_schema' 
      AND table_name = 'characters' 
      AND column_name IN ('gender', 'ethnicity', 'height', 'weight', 'hair_color', 'eye_color', 'phone_number', 'postal', 'occupation', 'dead', 'date_of_dead', 'missing', 'arrested', 'callsign', 'callsign2', 'suspended', 'whitelist_status', 'radio_channel_id')
      ORDER BY column_name
    `);
    
    console.log(`\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`‚úÖ –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users: ${usersColumns.rows.length}/4`);
    console.log(`‚úÖ –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ characters: ${charsColumns.rows.length}/18`);
    
    if (usersColumns.rows.length === 4 && charsColumns.rows.length === 18) {
      console.log('\nüéâ –í–°–ï –ü–û–õ–Ø –£–°–ü–ï–®–ù–û –î–û–ë–ê–í–õ–ï–ù–´ –í DEV_SCHEMA!');
      console.log('\nüìã –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∏–∑ SnailyCAD:');
      console.log('='.repeat(50));
      
      console.log('\nüë§ USERS:');
      usersColumns.rows.forEach(row => {
        console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
      });
      
      console.log('\nüë• CHARACTERS:');
      charsColumns.rows.forEach(row => {
        console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
      });
    } else {
      console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

fixDevSchemaConstraint()
  .then(() => {
    console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 