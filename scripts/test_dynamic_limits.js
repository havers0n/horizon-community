import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'http://localhost:54321';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function testDynamicLimits() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è candidate
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, email, username')
      .eq('email', 'candidate@horizon.com')
      .single();

    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email} (ID: ${user.id})`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
    const { data: departments, error: deptError } = await supabase
      .from('departments')
      .select('id, name')
      .limit(1);

    if (deptError || !departments || departments.length === 0) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', deptError?.message);
      return;
    }

    const department = departments[0];
    console.log(`‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: ${department.name} (ID: ${department.id})`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏
    const currentMonth = new Date();
    currentMonth.setDate(1);
    currentMonth.setHours(0, 0, 0, 0);

    const { data: currentApps, error: appsError } = await supabase
      .from('applications')
      .select('id, type, status, created_at')
      .eq('author_id', user.id)
      .eq('type', 'entry')
      .gte('created_at', currentMonth.toISOString());

    if (appsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', appsError.message);
      return;
    }

    console.log(`üìä –¢–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏: ${currentApps.length}/3`);

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
    const appsToCreate = 3 - currentApps.length;
    
    if (appsToCreate <= 0) {
      console.log('‚úÖ –õ–∏–º–∏—Ç —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –°–æ–∑–¥–∞–µ–º –µ—â–µ –æ–¥–Ω—É –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
    } else {
      console.log(`üìù –°–æ–∑–¥–∞–µ–º ${appsToCreate} –∑–∞—è–≤–æ–∫ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞...`);
    }

    // –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—è–≤–∫—É
    const testApplicationData = {
      fullName: "–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
      birthDate: "1990-01-01",
      departmentId: department.id,
      departmentDescription: "–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞",
      motivation: "–¢–µ—Å—Ç–æ–≤–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤",
      hasMicrophone: true,
      meetsSystemRequirements: true,
      systemRequirementsLink: "https://example.com/requirements",
      sourceOfInformation: "discord",
      inOtherCommunities: false,
      wasInOtherCommunities: false,
      otherCommunitiesDetails: ""
    };

    const { data: application, error: appError } = await supabase
      .from('applications')
      .insert({
        author_id: user.id,
        type: 'entry',
        status: 'pending',
        data: testApplicationData,
        status_history: [{
          status: 'pending',
          date: new Date().toISOString(),
          comment: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ª–∏–º–∏—Ç–æ–≤',
          reviewerId: null
        }]
      })
      .select()
      .single();

    if (appError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', appError.message);
      return;
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ ID: ${application.id}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
    const { data: updatedApps, error: updatedAppsError } = await supabase
      .from('applications')
      .select('id, type, status, created_at')
      .eq('author_id', user.id)
      .eq('type', 'entry')
      .gte('created_at', currentMonth.toISOString());

    if (updatedAppsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:', updatedAppsError.message);
      return;
    }

    console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: ${updatedApps.length}/3`);
    
    const isLimitReached = updatedApps.length >= 3;
    console.log(`üéØ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω: ${isLimitReached ? '‚ùå –î–ê' : '‚úÖ –ù–ï–¢'}`);

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('=====================================');
    console.log('üí° –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5173');
    console.log('2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ candidate@horizon.com');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞ "–õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω"');
    console.log('4. –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å" –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    console.log('=====================================');

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  }
}

testDynamicLimits().catch(console.error); 