import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabaseUrl = process.env.SUPABASE_URL || 'http://localhost:54321'
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseServiceKey) {
    console.error('SUPABASE_SERVICE_ROLE_KEY not found in environment variables')
    process.exit(1)
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
})

// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
const testUsers = [
    {
        email: 'test1@example.com',
        password: 'password123',
        username: 'testuser1',
        role: 'candidate',
        rank: 'Cadet',
        division: 'Patrol'
    },
    {
        email: 'supervisor@example.com',
        password: 'password123',
        username: 'supervisor1',
        role: 'supervisor',
        rank: 'Lieutenant',
        division: 'Patrol'
    },
    {
        email: 'admin@example.com',
        password: 'password123',
        username: 'admin1',
        role: 'admin',
        rank: 'Captain',
        division: 'Administration'
    },
    {
        email: 'moderator@example.com',
        password: 'password123',
        username: 'moderator1',
        role: 'moderator',
        rank: 'Sergeant',
        division: 'Internal Affairs'
    },
    {
        email: 'support@example.com',
        password: 'password123',
        username: 'support1',
        role: 'support',
        rank: 'Officer',
        division: 'Support'
    },
    {
        email: 'admin2@example.com',
        password: 'Admin123!',
        username: 'admin_full',
        role: 'admin',
        rank: 'Chief',
        division: 'Administration'
    },
    {
        email: 'guest@example.com',
        password: 'Guest123!',
        username: 'guest_user',
        role: 'candidate',
        rank: 'None',
        division: 'None'
    },
    {
        email: 'user@example.com',
        password: 'User123!',
        username: 'standard_user',
        role: 'member',
        rank: 'Officer',
        division: 'Patrol'
    }
]

async function createTestUsers() {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    
    try {
        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã
        console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤...')
        const { data: departments, error: deptError } = await supabase
            .from('departments')
            .upsert([
                { name: 'LSPD', full_name: 'Los Santos Police Department', description: '–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –õ–æ—Å-–°–∞–Ω—Ç–æ—Å–∞' },
                { name: 'LSFD', full_name: 'Los Santos Fire Department', description: '–ü–æ–∂–∞—Ä–Ω—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –õ–æ—Å-–°–∞–Ω—Ç–æ—Å–∞' },
                { name: 'LSMC', full_name: 'Los Santos Medical Center', description: '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –õ–æ—Å-–°–∞–Ω—Ç–æ—Å–∞' }
            ])
            .select()
        
        if (deptError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:', deptError)
            return
        }
        
        console.log('‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã')
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ auth.users –∏ users —Ç–∞–±–ª–∏—Ü–µ
        for (const user of testUsers) {
            console.log(`üë§ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username} (${user.email})`)
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ auth.users
            const { data: authData, error: authError } = await supabase.auth.admin.createUser({
                email: user.email,
                password: user.password,
                email_confirm: true
            })
            
            if (authError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email}:`, authError)
                continue
            }
            
            console.log(`‚úÖ Auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${authData.user.id}`)
            
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users —Ç–∞–±–ª–∏—Ü–µ
            const { data: userData, error: userError } = await supabase
                .from('users')
                .insert({
                    username: user.username,
                    email: user.email,
                    password_hash: 'hashed_password', // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–µ—à –ø–∞—Ä–æ–ª—è
                    role: user.role,
                    status: 'active',
                    department_id: 1, // LSPD
                    rank: user.rank,
                    division: user.division,
                    auth_id: authData.user.id
                })
                .select()
            
            if (userError) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username}:`, userError)
                continue
            }
            
            console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ users —Ç–∞–±–ª–∏—Ü–µ: ${userData[0].id}`)
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
        await createTestData()
        
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!')
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        const { data: users, error: usersError } = await supabase
            .from('users')
            .select('id, username, email, role, status, department_id, rank, division, auth_id')
            .order('id')
        
        if (usersError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError)
            return
        }
        
        console.log('\nüìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:')
        console.table(users)
        
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
    }
}

async function createTestData() {
    try {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏
        const { error: appsError } = await supabase
            .from('applications')
            .insert([
                {
                    author_id: 1,
                    type: 'recruitment',
                    status: 'pending',
                    data: { department: 'LSPD', position: 'Officer', experience: '2 years' }
                },
                {
                    author_id: 1,
                    type: 'promotion',
                    status: 'pending',
                    data: { current_rank: 'Cadet', desired_rank: 'Officer', reason: 'Excellent performance' }
                },
                {
                    author_id: 2,
                    type: 'transfer',
                    status: 'approved',
                    data: { from_department: 'LSPD', to_department: 'LSFD', reason: 'Personal request' }
                }
            ])
        
        if (appsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫:', appsError)
        } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã')
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        const { error: ticketsError } = await supabase
            .from('support_tickets')
            .insert([
                {
                    author_id: 1,
                    status: 'open',
                    handler_id: 5,
                    messages: [{ author: 'testuser1', message: '–ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', timestamp: new Date().toISOString() }]
                },
                {
                    author_id: 2,
                    status: 'closed',
                    handler_id: 5,
                    messages: [
                        { author: 'supervisor1', message: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏', timestamp: new Date().toISOString() },
                        { author: 'support1', message: '–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞', timestamp: new Date().toISOString() }
                    ]
                }
            ])
        
        if (ticketsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤:', ticketsError)
        } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã')
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const { error: notificationsError } = await supabase
            .from('notifications')
            .insert([
                {
                    recipient_id: 1,
                    content: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
                    link: '/applications/1',
                    is_read: false
                },
                {
                    recipient_id: 2,
                    content: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–∞—à–µ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è',
                    link: '/applications/2',
                    is_read: true
                },
                {
                    recipient_id: 3,
                    content: '–°–∏—Å—Ç–µ–º–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
                    link: '/dashboard',
                    is_read: false
                }
            ])
        
        if (notificationsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', notificationsError)
        } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã')
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ—Å—Ç
        const { error: testsError } = await supabase
            .from('tests')
            .insert([
                {
                    title: '–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ LSPD',
                    related_to: { department: 'LSPD', position: 'Officer' },
                    duration_minutes: 30,
                    questions: [
                        {
                            question: '–ß—Ç–æ —Ç–∞–∫–æ–µ Miranda Rights?',
                            options: ['–ü—Ä–∞–≤–∞ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ', '–ü—Ä–∞–≤–∞ –æ—Ñ–∏—Ü–µ—Ä–∞', '–ü—Ä–∞–≤–∞ —Å–≤–∏–¥–µ—Ç–µ–ª—è'],
                            correct: 0
                        },
                        {
                            question: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ?',
                            options: ['50 mph', '60 mph', '70 mph'],
                            correct: 0
                        }
                    ]
                }
            ])
        
        if (testsError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤:', testsError)
        } else {
            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã')
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function cleanupTestData() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    try {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ auth.users
        const { data: users } = await supabase.from('users').select('auth_id')
        
        for (const user of users || []) {
            await supabase.auth.admin.deleteUser(user.auth_id)
        }
        
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã')
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error)
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const command = process.argv[2]

if (command === 'create') {
    createTestUsers()
} else if (command === 'cleanup') {
    cleanupTestData()
} else {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:')
    console.log('  node scripts/create_test_users.js create   - —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    console.log('  node scripts/create_test_users.js cleanup  - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
}
