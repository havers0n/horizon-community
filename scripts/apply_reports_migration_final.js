import { createClient } from '@supabase/supabase-js';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyReportsMigrationFinal() {
  try {
    console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ –†–ê–ü–û–†–¢–û–í...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('id')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', testError.message);
      process.exit(1);
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    const migrations = [
      '010_report_templates_system.sql',
      '011_enhanced_report_templates.sql',
      '012_add_template_status.sql'
    ];
    
    for (const migrationFile of migrations) {
      console.log(`\nüìÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${migrationFile}`);
      
      const migrationPath = path.join(__dirname, `../supabase/migrations/${migrationFile}`);
      const migrationSQL = await fs.readFile(migrationPath, 'utf-8');
      
      // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      const commands = migrationSQL
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
      
      console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
      let successCount = 0;
      let errorCount = 0;
      
      for (let i = 0; i < commands.length; i++) {
        const command = commands[i];
        if (command.trim()) {
          console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${i + 1}/${commands.length}...`);
          
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ REST API
            const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${supabaseServiceKey}`,
                'apikey': supabaseServiceKey
              },
              body: JSON.stringify({ sql: command })
            });
            
            if (!response.ok) {
              console.log(`‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞ (exec_sql –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)`);
              errorCount++;
              continue;
            }
            
            const result = await response.json();
            if (result.error) {
              console.log(`‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞:`, result.error);
              errorCount++;
            } else {
              console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
              successCount++;
            }
          } catch (err) {
            console.log(`‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –ø—Ä–æ–ø—É—â–µ–Ω–∞:`, err.message);
            errorCount++;
          }
        }
      }
      
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ${migrationFile}:`);
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...');
    
    const tablesToCheck = [
      'report_templates',
      'filled_reports'
    ];
    
    for (const table of tablesToCheck) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –¥–æ—Å—Ç—É–ø–Ω–∞`);
        }
      } catch (err) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, err.message);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    
    try {
      const { data: templates, error: templatesError } = await supabase
        .from('report_templates')
        .select('*');
      
      if (templatesError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', templatesError.message);
      } else {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞–ø–æ—Ä—Ç–æ–≤`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
        const categories = [...new Set(templates.map(t => t.category))];
        console.log(`üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${categories.join(', ')}`);
      }
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è...');
    
    try {
      const { data: sampleTemplate, error: sampleError } = await supabase
        .from('report_templates')
        .select('title, category, difficulty, tags, required_fields')
        .limit(1);
      
      if (sampleError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π:', sampleError.message);
      } else if (sampleTemplate.length > 0) {
        console.log('‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã:');
        console.log(`   - category: ${sampleTemplate[0].category}`);
        console.log(`   - difficulty: ${sampleTemplate[0].difficulty}`);
        console.log(`   - tags: ${sampleTemplate[0].tags?.length || 0} —Ç–µ–≥–æ–≤`);
        console.log(`   - required_fields: ${sampleTemplate[0].required_fields?.length || 0} –ø–æ–ª–µ–π`);
      }
    } catch (err) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π:', err.message);
    }
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞–ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    console.log('\nüìã –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ /reports –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∫–ª–∞–¥–∫—É "–®–∞–±–ª–æ–Ω—ã"');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º');
    console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ä–∞–ø–æ—Ä—Ç');
    console.log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

applyReportsMigrationFinal(); 