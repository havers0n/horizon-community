#!/usr/bin/env node

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import dotenv from 'dotenv';
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyCADMigration() {
  console.log('üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ CAD/MDT —Å–∏—Å—Ç–µ–º—ã...');
  
  try {
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, '..', 'supabase', 'migrations', '005_cad_mdt_system.sql');
    
    if (!fs.existsSync(migrationPath)) {
      console.error('‚ùå –§–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω:', migrationPath);
      process.exit(1);
    }
    
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    console.log('üìÑ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const { error } = await supabase.rpc('exec_sql', { sql: migrationSQL });
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
      process.exit(1);
    }
    
    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è CAD/MDT —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
    
    const tables = [
      'characters',
      'vehicles', 
      'weapons',
      'pets',
      'records',
      'call911',
      'active_units',
      'call_attachments'
    ];
    
    for (const table of tables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.warn(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –¥–æ—Å—Ç—É–ø–Ω–∞`);
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, err.message);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...');
    
    const functions = [
      'generate_insurance_number',
      'generate_vin',
      'generate_weapon_serial',
      'generate_callsign',
      'update_updated_at_column'
    ];
    
    for (const func of functions) {
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        const { error } = await supabase.rpc(func);
        
        if (error && !error.message.includes('function returned no rows')) {
          console.warn(`‚ö†Ô∏è  –§—É–Ω–∫—Ü–∏—è ${func}: ${error.message}`);
        } else {
          console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${func} –¥–æ—Å—Ç—É–ø–Ω–∞`);
        }
      } catch (err) {
        console.warn(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ ${func}:`, err.message);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (process.argv.includes('--seed')) {
      console.log('üå± –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      await createTestData();
    }
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è CAD/MDT –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('');
    console.log('üìã –ß—Ç–æ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ:');
    console.log('  ‚Ä¢ –¢–∞–±–ª–∏—Ü—ã: characters, vehicles, weapons, pets, records, call911, active_units, call_attachments');
    console.log('  ‚Ä¢ –§—É–Ω–∫—Ü–∏–∏: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–æ–≤, VIN, —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤, –ø–æ–∑—ã–≤–Ω—ã—Ö');
    console.log('  ‚Ä¢ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('  ‚Ä¢ –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
    console.log('');
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

async function createTestData() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
    const { data: dept, error: deptError } = await supabase
      .from('departments')
      .insert({
        name: 'LSPD',
        fullName: 'Horizon Police Department',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –ø–æ–ª–∏—Ü–∏–∏',
        logoUrl: 'https://example.com/lspd-logo.png'
      })
      .select()
      .single();
    
    if (deptError) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞:', deptError.message);
      return;
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç LSPD —Å–æ–∑–¥–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .insert({
        username: 'test_officer',
        email: 'officer@test.com',
        passwordHash: 'test_hash',
        role: 'member',
        departmentId: dept.id,
        rank: 'Officer'
      })
      .select()
      .single();
    
    if (userError) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    const { data: character, error: charError } = await supabase
      .from('characters')
      .insert({
        ownerId: user.id,
        type: 'leo',
        firstName: '–î–∂–æ–Ω',
        lastName: '–î–æ—É',
        dob: '1990-01-01',
        address: '123 Main St, Horizon City',
        insuranceNumber: 'INS-2024-00001',
        isUnit: true,
        unitInfo: {
          badgeNumber: '12345',
          rank: 'Officer',
          division: 'Patrol'
        }
      })
      .select()
      .single();
    
    if (charError) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', charError.message);
      return;
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –¢–°
    const { data: vehicle, error: vehicleError } = await supabase
      .from('vehicles')
      .insert({
        ownerId: character.id,
        plate: 'TEST123',
        vin: 'ABCDEFGHIJKLMNOPQ',
        model: 'Police Cruiser',
        color: 'Black and White',
        registration: 'valid',
        insurance: 'valid'
      })
      .select()
      .single();
    
    if (vehicleError) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¢–°:', vehicleError.message);
      return;
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –¢–° —Å–æ–∑–¥–∞–Ω–æ');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ 911
    const { data: call, error: callError } = await supabase
      .from('call911')
      .insert({
        location: '123 Test Street, Horizon City',
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ 911',
        type: 'police',
        priority: 2,
        callerInfo: {
          name: 'Test Caller',
          phone: '555-0123'
        }
      })
      .select()
      .single();
    
    if (callError) {
      console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞:', callError.message);
      return;
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ 911 —Å–æ–∑–¥–∞–Ω');
    
    console.log('üå± –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    
  } catch (error) {
    console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (import.meta.url === `file://${process.argv[1]}`) {
  applyCADMigration();
} 