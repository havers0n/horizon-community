import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabaseUrl = process.env.SUPABASE_URL || 'http://localhost:54321'
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseServiceKey) {
    console.error('SUPABASE_SERVICE_ROLE_KEY not found in environment variables')
    process.exit(1)
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role –∫–ª—é—á–æ–º
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
    auth: {
        autoRefreshToken: false,
        persistSession: false
    }
})

async function checkExistingUsers() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ...\n')
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        const { data: users, error } = await supabase
            .from('users')
            .select('id, username, email, role, status, department_id, rank, division, created_at')
            .order('id')
        
        if (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error)
            return
        }
        
        if (!users || users.length === 0) {
            console.log('üì≠ –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            return
        }
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`)
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        const usersByRole = users.reduce((acc, user) => {
            if (!acc[user.role]) {
                acc[user.role] = []
            }
            acc[user.role].push(user)
            return acc
        }, {})
        
        // –í—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        for (const [role, roleUsers] of Object.entries(usersByRole)) {
            console.log(`\nüë• –†–æ–ª—å: ${role.toUpperCase()} (${roleUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)`)
            console.log('‚îÅ'.repeat(50))
            
            roleUsers.forEach(user => {
                console.log(`  üìß ${user.email}`)
                console.log(`     ‚Ä¢ Username: ${user.username}`)
                console.log(`     ‚Ä¢ ID: ${user.id}`)
                console.log(`     ‚Ä¢ Status: ${user.status}`)
                console.log(`     ‚Ä¢ Department: ${user.department_id || 'N/A'}`)
                console.log(`     ‚Ä¢ Rank: ${user.rank || 'N/A'}`)
                console.log(`     ‚Ä¢ Division: ${user.division || 'N/A'}`)
                console.log(`     ‚Ä¢ Created: ${new Date(user.created_at).toLocaleDateString()}`)
                console.log()
            })
        }
        
        // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        console.log('\nüìã –°–í–û–î–ö–ê:')
        console.log('‚îÅ'.repeat(50))
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Ä–æ–ª—è–º:')
        for (const [role, roleUsers] of Object.entries(usersByRole)) {
            console.log(`  ‚Ä¢ ${role}: ${roleUsers.length}`)
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email
        const emailCount = {}
        users.forEach(user => {
            emailCount[user.email] = (emailCount[user.email] || 0) + 1
        })
        
        const duplicates = Object.entries(emailCount).filter(([email, count]) => count > 1)
        if (duplicates.length > 0) {
            console.log('\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è email –∞–¥—Ä–µ—Å–∞:')
            duplicates.forEach(([email, count]) => {
                console.log(`  ‚Ä¢ ${email}: ${count} —Ä–∞–∑`)
            })
        } else {
            console.log('\n‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è email –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞–¥–∞–Ω–∏—è
        console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞:')
        console.log('‚îÅ'.repeat(50))
        const requiredUsers = [
            { email: 'admin@example.com', role: 'admin' },
            { email: 'test1@example.com', role: 'candidate' },
            { email: 'supervisor@example.com', role: 'supervisor' },
            { email: 'moderator@example.com', role: 'moderator' },
            { email: 'support@example.com', role: 'support' }
        ]
        
        requiredUsers.forEach(({ email, role }) => {
            const user = users.find(u => u.email === email)
            if (user) {
                if (user.role === role) {
                    console.log(`‚úÖ ${email} (${role}) - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
                } else {
                    console.log(`‚ö†Ô∏è  ${email} - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Å —Ä–æ–ª—å—é '${user.role}' –≤–º–µ—Å—Ç–æ '${role}'`)
                }
            } else {
                console.log(`‚ùå ${email} (${role}) - –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
            }
        })
        
    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error)
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkExistingUsers()
