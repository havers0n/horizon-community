#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Supabase –≤ –æ–±–ª–∞—á–Ω—ã–π
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/migrate-to-cloud.js
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: join(__dirname, '..', '.env') })
dotenv.config({ path: join(__dirname, '..', '.env.production') })

// –õ–æ–∫–∞–ª—å–Ω—ã–π Supabase –∫–ª–∏–µ–Ω—Ç
const localSupabase = createClient(
  process.env.VITE_SUPABASE_URL || 'http://localhost:54321',
  process.env.VITE_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY
)

// –û–±–ª–∞—á–Ω—ã–π Supabase –∫–ª–∏–µ–Ω—Ç
const cloudSupabase = createClient(
  process.env.VITE_SUPABASE_URL_CLOUD || 'https://axgtvvcimqoyxbfvdrok.supabase.co',
  process.env.VITE_SUPABASE_ANON_KEY_CLOUD || process.env.SUPABASE_ANON_KEY
)

const TABLES = [
  'departments',
  'users',
  'tests',
  'applications',
  'support_tickets',
  'complaints',
  'reports',
  'notifications'
]

async function migrateTable(tableName) {
  console.log(`üìä Migrating ${tableName}...`)
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
    const { data: localData, error: localError } = await localSupabase
      .from(tableName)
      .select('*')
    
    if (localError) {
      console.error(`‚ùå Error reading from local ${tableName}:`, localError)
      return false
    }
    
    if (!localData || localData.length === 0) {
      console.log(`‚úÖ ${tableName} is empty, skipping`)
      return true
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –æ–±–ª–∞—á–Ω–æ–π –ë–î (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
    const { error: deleteError } = await cloudSupabase
      .from(tableName)
      .delete()
      .neq('id', 0) // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
    
    if (deleteError) {
      console.warn(`‚ö†Ô∏è  Warning cleaning ${tableName}:`, deleteError)
    }
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±–ª–∞—á–Ω—É—é –ë–î
    const { error: insertError } = await cloudSupabase
      .from(tableName)
      .insert(localData)
    
    if (insertError) {
      console.error(`‚ùå Error inserting into cloud ${tableName}:`, insertError)
      return false
    }
    
    console.log(`‚úÖ Successfully migrated ${localData.length} records to ${tableName}`)
    return true
    
  } catch (error) {
    console.error(`‚ùå Unexpected error migrating ${tableName}:`, error)
    return false
  }
}

async function migrateAllData() {
  console.log('üöÄ Starting data migration from local to cloud Supabase...')
  console.log('‚ö†Ô∏è  WARNING: This will DELETE all existing data in cloud database!')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–±–µ–∏–º –ë–î
  try {
    const { data: localTest } = await localSupabase.from('departments').select('count').limit(1)
    const { data: cloudTest } = await cloudSupabase.from('departments').select('count').limit(1)
    
    console.log('‚úÖ Both databases are accessible')
  } catch (error) {
    console.error('‚ùå Database connection error:', error)
    process.exit(1)
  }
  
  let successCount = 0
  let failCount = 0
  
  for (const table of TABLES) {
    const success = await migrateTable(table)
    if (success) {
      successCount++
    } else {
      failCount++
    }
  }
  
  console.log('\\nüìà Migration Summary:')
  console.log(`‚úÖ Successfully migrated: ${successCount} tables`)
  console.log(`‚ùå Failed: ${failCount} tables`)
  
  if (failCount === 0) {
    console.log('\\nüéâ All data successfully migrated to cloud!')
  } else {
    console.log('\\n‚ö†Ô∏è  Some tables failed to migrate. Please check the errors above.')
    process.exit(1)
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
if (!process.env.VITE_SUPABASE_URL_CLOUD && !process.env.SUPABASE_ANON_KEY) {
  console.error('‚ùå Please set cloud Supabase credentials in .env.production')
  process.exit(1)
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateAllData().catch(console.error)
