async function testCurlLimits() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ª–∏–º–∏—Ç–æ–≤ —Å curl-–ø–æ–¥–æ–±–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º...\n');

  try {
    const response = await fetch('http://localhost:5000/api/application-limits/entry', {
      method: 'GET',
      headers: {
        'Authorization': 'Bearer mock-token-19-1234567890',
        'Content-Type': 'application/json'
      }
    });

    console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`);
    console.log(`üìä –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:`, Object.fromEntries(response.headers.entries()));
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ –û—Ç–≤–µ—Ç API:');
      console.log(JSON.stringify(data, null, 2));
      
      if (data.restriction) {
        console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:');
        console.log(`–†–∞–∑—Ä–µ—à–µ–Ω–æ: ${data.restriction.allowed}`);
        console.log(`–ü—Ä–∏—á–∏–Ω–∞: ${data.restriction.reason || '–ù–µ—Ç'}`);
        console.log(`–û—Å—Ç–∞–ª–æ—Å—å: ${data.restriction.remainingCount || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`);
      }
    } else {
      const errorText = await response.text();
      console.log('‚ùå –û—à–∏–±–∫–∞ API:');
      console.log(errorText);
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }
}

testCurlLimits().catch(console.error); 