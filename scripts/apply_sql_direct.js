import { createClient } from '@supabase/supabase-js';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applySQLDirect() {
  try {
    console.log('üöÄ –ü–†–Ø–ú–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï SQL –ö–û–ú–ê–ù–î...');
    console.log('='.repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('id')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', testError.message);
      process.exit(1);
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users
    const usersCommands = [
      'ALTER TABLE "users" ADD COLUMN IF NOT EXISTS "has_2fa" boolean DEFAULT false NOT NULL',
      'ALTER TABLE "users" ADD COLUMN IF NOT EXISTS "is_dark_theme" boolean DEFAULT false NOT NULL',
      'ALTER TABLE "users" ADD COLUMN IF NOT EXISTS "sound_settings" jsonb DEFAULT \'{}\'::jsonb',
      'ALTER TABLE "users" ADD COLUMN IF NOT EXISTS "api_token" text',
      'ALTER TABLE "users" ADD CONSTRAINT IF NOT EXISTS "users_api_token_unique" UNIQUE("api_token")'
    ];
    
    // SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É characters
    const charactersCommands = [
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "gender" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "ethnicity" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "height" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "weight" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "hair_color" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "eye_color" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "phone_number" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "postal" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "occupation" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "dead" boolean DEFAULT false',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "date_of_dead" date',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "missing" boolean DEFAULT false',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "arrested" boolean DEFAULT false',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "callsign" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "callsign2" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "suspended" boolean DEFAULT false',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "whitelist_status" text DEFAULT \'PENDING\'',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "radio_channel_id" text'
    ];
    
    const allCommands = [...usersCommands, ...charactersCommands];
    
    console.log(`\nüîß –ü—Ä–∏–º–µ–Ω—è–µ–º ${allCommands.length} SQL –∫–æ–º–∞–Ω–¥...`);
    console.log('-'.repeat(50));
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < allCommands.length; i++) {
      const command = allCommands[i];
      try {
        console.log(`  üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${i + 1}/${allCommands.length}...`);
        console.log(`     SQL: ${command.substring(0, 60)}...`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ REST API
        const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${supabaseServiceKey}`,
            'apikey': supabaseServiceKey
          },
          body: JSON.stringify({ sql: command })
        });
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error(`    ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${errorText}`);
          errorCount++;
        } else {
          console.log(`    ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
          successCount++;
        }
      } catch (error) {
        console.error(`    ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
    try {
      const { data: usersData, error: usersError } = await supabase
        .from('users')
        .select('has_2fa, is_dark_theme, sound_settings, api_token')
        .limit(1);
      
      if (usersError) {
        console.log('‚ùå –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', usersError.message);
      } else {
        console.log('‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã users:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ characters
    try {
      const { data: charsData, error: charsError } = await supabase
        .from('characters')
        .select('gender, ethnicity, height, weight, hair_color, eye_color, phone_number, postal, occupation, dead, date_of_dead, missing, arrested, callsign, callsign2, suspended, whitelist_status, radio_channel_id')
        .limit(1);
      
      if (charsError) {
        console.log('‚ùå –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ characters –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', charsError.message);
      } else {
        console.log('‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ characters –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã characters:', error.message);
    }
    
    console.log('\nüéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ SQL –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

applySQLDirect(); 