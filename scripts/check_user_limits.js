import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º service role key –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'http://localhost:54321';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function checkUserLimits() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è candidate
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('id, email, username, role')
      .eq('email', 'candidate@horizon.com')
      .single();

    if (userError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message);
      return;
    }

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email} (ID: ${user.id}, –†–æ–ª—å: ${user.role})`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const currentMonth = new Date();
    currentMonth.setDate(1); // –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    currentMonth.setHours(0, 0, 0, 0);

    const { data: applications, error: appsError } = await supabase
      .from('applications')
      .select('id, type, status, created_at')
      .eq('author_id', user.id)
      .gte('created_at', currentMonth.toISOString());

    if (appsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', appsError.message);
      return;
    }

    console.log(`\nüìä –ó–∞—è–≤–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü (${currentMonth.toLocaleDateString()}):`);
    console.log('=====================================');
    
    const entryApps = applications.filter(app => app.type === 'entry');
    const leaveApps = applications.filter(app => app.type === 'leave');
    
    console.log(`üìù –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ: ${entryApps.length}/3`);
    entryApps.forEach(app => {
      console.log(`  - ID: ${app.id}, –°—Ç–∞—Ç—É—Å: ${app.status}, –î–∞—Ç–∞: ${new Date(app.created_at).toLocaleDateString()}`);
    });
    
    console.log(`üìã –ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫: ${leaveApps.length}/2`);
    leaveApps.forEach(app => {
      console.log(`  - ID: ${app.id}, –°—Ç–∞—Ç—É—Å: ${app.status}, –î–∞—Ç–∞: ${new Date(app.created_at).toLocaleDateString()}`);
    });

    console.log(`üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${applications.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    const entryLimitReached = entryApps.length >= 3;
    const leaveLimitReached = leaveApps.length >= 2;
    
    console.log('\nüéØ –°—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç–æ–≤:');
    console.log('=====================================');
    console.log(`üìù –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ (3/–º–µ—Å—è—Ü): ${entryLimitReached ? '‚ùå –ò–°–ß–ï–†–ü–ê–ù' : '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ'}`);
    console.log(`üìã –û—Ç–ø—É—Å–∫ (2/–º–µ—Å—è—Ü): ${leaveLimitReached ? '‚ùå –ò–°–ß–ï–†–ü–ê–ù' : '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ'}`);
    
    if (entryLimitReached) {
      console.log(`\nüí° –î–ª—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: node scripts/reset_test_limits.js`);
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤:', error.message);
  }
}

checkUserLimits().catch(console.error); 