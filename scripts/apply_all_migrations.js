import { createClient } from '@supabase/supabase-js';
import fs from 'fs/promises';
import path from 'path';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è VITE_SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyAllMigrations() {
  try {
    console.log('üöÄ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –í–°–ï–• –ú–ò–ì–†–ê–¶–ò–ô...');
    console.log('=' * 50);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const { data: testData, error: testError } = await supabase
      .from('users')
      .select('id')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', testError.message);
      process.exit(1);
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ');
    
    // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const migrations = [
      '001_initial_schema.sql',
      '002_rls_policies.sql',
      '003_rls_candidate_guest_restrictions.sql',
      '004_test_system.sql',
      '005_cad_mdt_system.sql',
      '006_joint_positions_history.sql',
      '007_update_departments.sql',
      '008_complete_character_system.sql',
      '009_setup_rls_policies.sql',
      '010_report_templates_system.sql',
      '011_enhanced_report_templates.sql',
      '012_add_template_status.sql',
      '013_forum_system.sql'
    ];
    
    let totalSuccess = 0;
    let totalErrors = 0;
    
    for (const migrationFile of migrations) {
      console.log(`\nüìÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: ${migrationFile}`);
      console.log('-'.repeat(50));
      
      try {
        const migrationPath = path.join(__dirname, `../supabase/migrations/${migrationFile}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        try {
          await fs.access(migrationPath);
        } catch (err) {
          console.log(`‚ö†Ô∏è  –§–∞–π–ª ${migrationFile} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }
        
        const migrationSQL = await fs.readFile(migrationPath, 'utf-8');
        
        // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const commands = migrationSQL
          .split(';')
          .map(cmd => cmd.trim())
          .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));
        
        console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
        let successCount = 0;
        let errorCount = 0;
        
        for (let i = 0; i < commands.length; i++) {
          const command = commands[i];
          if (command.trim()) {
            try {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ REST API
              const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${supabaseServiceKey}`,
                  'apikey': supabaseServiceKey
                },
                body: JSON.stringify({ sql: command })
              });
              
              if (!response.ok) {
                errorCount++;
                continue;
              }
              
              const result = await response.json();
              if (result.error) {
                errorCount++;
              } else {
                successCount++;
              }
            } catch (err) {
              errorCount++;
            }
          }
        }
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ${migrationFile}:`);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        
        totalSuccess += successCount;
        totalErrors += errorCount;
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ ${migrationFile}:`, error.message);
        totalErrors++;
      }
    }
    
    console.log('\n' + '='.repeat(50));
    console.log('üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log(`‚úÖ –í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ: ${totalSuccess}`);
    console.log(`‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: ${totalErrors}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...');
    
    const mainTables = [
      'users',
      'departments',
      'applications',
      'support_tickets',
      'complaints',
      'reports',
      'notifications',
      'tests',
      'characters',
      'vehicles',
      'weapons',
      'call911',
      'active_units',
      'report_templates',
      'filled_reports',
      'forum_categories',
      'forum_topics',
      'forum_posts',
      'forum_stats'
    ];
    
    let availableTables = 0;
    
    for (const table of mainTables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –¥–æ—Å—Ç—É–ø–Ω–∞`);
          availableTables++;
        }
      } catch (err) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã ${table}:`, err.message);
      }
    }
    
    console.log(`\nüìä –î–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–±–ª–∏—Ü: ${availableTables}/${mainTables.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä—É–º
    try {
      const { data: categories, error: catError } = await supabase
        .from('forum_categories')
        .select('*');
      
      if (catError) {
        console.log('‚ùå –§–æ—Ä—É–º: —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
      } else {
        console.log(`‚úÖ –§–æ—Ä—É–º: ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–Ω–æ`);
      }
    } catch (err) {
      console.log('‚ùå –§–æ—Ä—É–º: —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º CAD/MDT
    try {
      const { data: characters, error: charError } = await supabase
        .from('characters')
        .select('*');
      
      if (charError) {
        console.log('‚ùå CAD/MDT: —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
      } else {
        console.log(`‚úÖ CAD/MDT: —Ç–∞–±–ª–∏—Ü–∞ characters –¥–æ—Å—Ç—É–ø–Ω–∞`);
      }
    } catch (err) {
      console.log('‚ùå CAD/MDT: —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–ø–æ—Ä—Ç—ã
    try {
      const { data: templates, error: tempError } = await supabase
        .from('report_templates')
        .select('*');
      
      if (tempError) {
        console.log('‚ùå –†–∞–ø–æ—Ä—Ç—ã: —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã');
      } else {
        console.log(`‚úÖ –†–∞–ø–æ—Ä—Ç—ã: ${templates.length} —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ`);
      }
    } catch (err) {
      console.log('‚ùå –†–∞–ø–æ—Ä—Ç—ã: —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
    
    console.log('\nüéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:');
    console.log('1. –§–æ—Ä—É–º: /forum');
    console.log('2. CAD/MDT: /cad');
    console.log('3. –†–∞–ø–æ—Ä—Ç—ã: /reports');
    console.log('4. API endpoints');
    console.log('5. WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

applyAllMigrations(); 