import dotenv from 'dotenv';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const API_BASE = 'http://localhost:5000';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function apiRequest(endpoint, options = {}) {
  const url = `${API_BASE}${endpoint}`;
  const response = await fetch(url, {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers
    },
    ...options
  });
  
  let data;
  try {
    data = await response.json();
  } catch (e) {
    data = await response.text();
  }
  
  return {
    status: response.status,
    data,
    ok: response.ok
  };
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function testPublicEndpoints() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints...');
  
  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤
  const departments = await apiRequest('/api/departments');
  console.log('GET /api/departments:', departments.status, departments.ok ? '‚úÖ' : '‚ùå');
  
  return departments.ok;
}

async function testRegistration() {
  console.log('\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
  
  const testUser = {
    username: `testuser_${Date.now()}`,
    email: `test_${Date.now()}@example.com`,
    password: 'testpassword123'
  };
  
  const result = await apiRequest('/api/auth/register', {
    method: 'POST',
    body: JSON.stringify(testUser)
  });
  
  console.log('POST /api/auth/register:', result.status, result.ok ? '‚úÖ' : '‚ùå');
  if (!result.ok) {
    console.log('Error:', result.data);
  }
  
  return result.ok ? { user: result.data.user, testUser } : null;
}

async function testLogin(credentials) {
  console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞...');
  
  const result = await apiRequest('/api/auth/login', {
    method: 'POST',
    body: JSON.stringify({
      email: credentials.email,
      password: credentials.password
    })
  });
  
  console.log('POST /api/auth/login:', result.status, result.ok ? '‚úÖ' : '‚ùå');
  if (!result.ok) {
    console.log('Error:', result.data);
  }
  
  return result.ok ? result.data : null;
}

async function testProtectedEndpoints(token) {
  console.log('\nüõ°Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints...');
  
  const headers = {
    'Authorization': `Bearer ${token}`
  };
  
  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
  const profile = await apiRequest('/api/auth/me', { headers });
  console.log('GET /api/auth/me:', profile.status, profile.ok ? '‚úÖ' : '‚ùå');
  
  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const applications = await apiRequest('/api/applications', { headers });
  console.log('GET /api/applications:', applications.status, applications.ok ? '‚úÖ' : '‚ùå');
  
  // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const notifications = await apiRequest('/api/notifications', { headers });
  console.log('GET /api/notifications:', notifications.status, notifications.ok ? '‚úÖ' : '‚ùå');
  
  return profile.ok && applications.ok && notifications.ok;
}

async function testWithoutToken() {
  console.log('\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...');
  
  const result = await apiRequest('/api/auth/me');
  console.log('GET /api/auth/me (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞):', result.status, result.status === 401 ? '‚úÖ' : '‚ùå');
  
  return result.status === 401;
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API endpoints...\n');
  
  try {
    // –¢–µ—Å—Ç –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints
    const publicOk = await testPublicEndpoints();
    
    // –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registrationResult = await testRegistration();
    
    if (registrationResult) {
      // –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
      const loginResult = await testLogin(registrationResult.testUser);
      
      if (loginResult && loginResult.session) {
        // –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
        const protectedOk = await testProtectedEndpoints(loginResult.session.access_token);
        
        // –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        const withoutTokenOk = await testWithoutToken();
        
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
        console.log('–ü—É–±–ª–∏—á–Ω—ã–µ endpoints:', publicOk ? '‚úÖ' : '‚ùå');
        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:', registrationResult ? '‚úÖ' : '‚ùå');
        console.log('–í—Ö–æ–¥:', loginResult ? '‚úÖ' : '‚ùå');
        console.log('–ó–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints:', protectedOk ? '‚úÖ' : '‚ùå');
        console.log('–ó–∞—â–∏—Ç–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞:', withoutTokenOk ? '‚úÖ' : '‚ùå');
        
        const allPassed = publicOk && registrationResult && loginResult && protectedOk && withoutTokenOk;
        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã:', allPassed ? '–ü–†–û–ô–î–ï–ù–´ ‚úÖ' : '–ü–†–û–í–ê–õ–ï–ù–´ ‚ùå');
        
        process.exit(allPassed ? 0 : 1);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ');
        process.exit(1);
      }
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      process.exit(1);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    process.exit(1);
  }
}

main();
