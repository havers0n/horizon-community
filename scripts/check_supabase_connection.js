import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...')
console.log('URL:', supabaseUrl)
console.log('Service Key:', supabaseServiceKey ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω')

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function testConnection() {
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const { data, error } = await supabase
      .from('users')
      .select('count')
      .limit(1)
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
      return false
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —É—Å–ø–µ—à–Ω–æ!')
    return true
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', err.message)
    return false
  }
}

async function main() {
  const connected = await testConnection()
  
  if (connected) {
    console.log('\nüìù –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è .env —Ñ–∞–π–ª–∞:')
    console.log(`VITE_SUPABASE_URL=${supabaseUrl}`)
    console.log(`SUPABASE_SERVICE_ROLE_KEY=${supabaseServiceKey}`)
    console.log('\nüí° –î–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL –ø–æ–ª—É—á–∏—Ç–µ DATABASE_URL –∏–∑:')
    console.log('Supabase Dashboard ‚Üí Settings ‚Üí Database ‚Üí Connection string')
  }
  
  process.exit(connected ? 0 : 1)
}

main()
