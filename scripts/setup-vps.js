#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ VPS
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/setup-vps.js
 * 
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 * - Node.js 18+ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
 * - –î–æ—Å—Ç—É–ø –∫ VPS —Å–µ—Ä–≤–µ—Ä—É
 * - –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// ES module compatibility
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function log(message) {
  console.log(`[${new Date().toISOString()}] ${message}`);
}

function executeCommand(command, options = {}) {
  try {
    log(`–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${command}`);
    const result = execSync(command, { 
      encoding: 'utf8', 
      stdio: options.silent ? 'pipe' : 'inherit',
      ...options 
    });
    return result;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
    throw error;
  }
}

function checkEnvironment() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  
  const requiredVars = [
    'NODE_ENV',
    'DATABASE_URL',
    'SUPABASE_URL',
    'SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'JWT_SECRET'
  ];
  
  const missing = [];
  for (const varName of requiredVars) {
    if (!process.env[varName]) {
      missing.push(varName);
    }
  }
  
  if (missing.length > 0) {
    log(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missing.join(', ')}`);
    log('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example');
    process.exit(1);
  }
  
  log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

function checkNodeVersion() {
  log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Node.js...');
  const version = process.version;
  const majorVersion = parseInt(version.slice(1).split('.')[0]);
  
  if (majorVersion < 18) {
    log(`‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Node.js 18+, —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${version}`);
    process.exit(1);
  }
  
  log(`‚úÖ Node.js –≤–µ—Ä—Å–∏—è: ${version}`);
}

function installDependencies() {
  log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
  executeCommand('npm ci --production');
  log('‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}

function buildApplication() {
  log('–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  executeCommand('npm run build:production');
  log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ');
}

function createSystemdService() {
  log('–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞...');
  
  const serviceContent = `[Unit]
Description=RolePlayIdentity Application
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=${process.cwd()}
Environment=NODE_ENV=production
Environment=PORT=5000
ExecStart=/usr/bin/node dist/index.js
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
`;

  const servicePath = '/etc/systemd/system/roleplayidentity.service';
  
  try {
    fs.writeFileSync(servicePath, serviceContent);
    log('‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å systemd –∏ –≤–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å
    executeCommand('systemctl daemon-reload');
    executeCommand('systemctl enable roleplayidentity.service');
    log('‚úÖ –°–µ—Ä–≤–∏—Å –≤–∫–ª—é—á–µ–Ω –≤ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫');
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: ${error.message}`);
    log('–°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ PM2');
  }
}

function setupNginx() {
  log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx...');
  
  const nginxConfig = `server {
    listen 80;
    server_name your-domain.com;
    
    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
}`;

  const configPath = '/etc/nginx/sites-available/roleplayidentity';
  
  try {
    fs.writeFileSync(configPath, nginxConfig);
    log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx —Å–æ–∑–¥–∞–Ω–∞');
    
    // –°–æ–∑–¥–∞—Ç—å —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É
    executeCommand('ln -sf /etc/nginx/sites-available/roleplayidentity /etc/nginx/sites-enabled/');
    executeCommand('nginx -t');
    executeCommand('systemctl reload nginx');
    log('‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx: ${error.message}`);
    log('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Nginx –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä');
  }
}

function setupFirewall() {
  log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞...');
  
  try {
    // –û—Ç–∫—Ä—ã—Ç—å –ø–æ—Ä—Ç—ã 80 –∏ 443
    executeCommand('ufw allow 80/tcp');
    executeCommand('ufw allow 443/tcp');
    executeCommand('ufw allow 22/tcp');
    log('‚úÖ –§–∞–π—Ä–≤–æ–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  } catch (error) {
    log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π—Ä–≤–æ–ª–∞: ${error.message}`);
    log('–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª –≤—Ä—É—á–Ω—É—é');
  }
}

async function setupVPS() {
  try {
    log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É VPS...');
    
    checkNodeVersion();
    checkEnvironment();
    installDependencies();
    buildApplication();
    createSystemdService();
    setupNginx();
    setupFirewall();
    
    log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VPS –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    log('\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: systemctl start roleplayidentity');
    log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: systemctl status roleplayidentity');
    log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (Let\'s Encrypt)');
    log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –¥–æ–º–µ–Ω –≤ DNS');
    log('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: journalctl -u roleplayidentity -f');
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${error.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
setupVPS(); 