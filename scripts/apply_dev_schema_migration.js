import { Pool } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

async function applyDevSchemaMigration() {
  console.log('üöÄ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ò –ö DEV_SCHEMA...');
  console.log('='.repeat(50));
  
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.DATABASE_URL?.includes('supabase.com') ? { rejectUnauthorized: false } : false,
  });

  try {
    const client = await pool.connect();
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É dev_schema –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Å—Ö–µ–º—É dev_schema –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...');
    await client.query('CREATE SCHEMA IF NOT EXISTS dev_schema');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ö–µ–º—É –ø–æ–∏—Å–∫–∞
    await client.query('SET search_path TO dev_schema, public');
    
    console.log('‚úÖ –°—Ö–µ–º–∞ dev_schema –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    
    // SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users
    const usersCommands = [
      'ALTER TABLE "users" ADD COLUMN IF NOT EXISTS "has_2fa" boolean DEFAULT false NOT NULL',
      'ALTER TABLE "users" ADD COLUMN IF NOT EXISTS "is_dark_theme" boolean DEFAULT false NOT NULL',
      'ALTER TABLE "users" ADD COLUMN IF NOT EXISTS "sound_settings" jsonb DEFAULT \'{}\'::jsonb',
      'ALTER TABLE "users" ADD COLUMN IF NOT EXISTS "api_token" text',
      'ALTER TABLE "users" ADD CONSTRAINT IF NOT EXISTS "users_api_token_unique" UNIQUE("api_token")'
    ];
    
    // SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É characters
    const charactersCommands = [
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "gender" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "ethnicity" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "height" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "weight" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "hair_color" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "eye_color" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "phone_number" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "postal" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "occupation" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "dead" boolean DEFAULT false',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "date_of_dead" date',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "missing" boolean DEFAULT false',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "arrested" boolean DEFAULT false',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "callsign" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "callsign2" text',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "suspended" boolean DEFAULT false',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "whitelist_status" text DEFAULT \'PENDING\'',
      'ALTER TABLE "characters" ADD COLUMN IF NOT EXISTS "radio_channel_id" text'
    ];
    
    const allCommands = [...usersCommands, ...charactersCommands];
    
    console.log(`üîß –ù–∞–π–¥–µ–Ω–æ ${allCommands.length} SQL –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`);
    console.log('-'.repeat(50));
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < allCommands.length; i++) {
      const command = allCommands[i];
      try {
        console.log(`  üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${i + 1}/${allCommands.length}...`);
        console.log(`     SQL: ${command.substring(0, 60)}...`);
        
        await client.query(command);
        console.log(`    ‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        successCount++;
      } catch (error) {
        console.error(`    ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${error.message}`);
        errorCount++;
      }
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥:`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users
    try {
      const usersResult = await client.query(`
        SELECT column_name, data_type, is_nullable, column_default 
        FROM information_schema.columns 
        WHERE table_schema = 'dev_schema' 
        AND table_name = 'users' 
        AND column_name IN ('has_2fa', 'is_dark_theme', 'sound_settings', 'api_token')
        ORDER BY column_name
      `);
      
      if (usersResult.rows.length > 0) {
        console.log('‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:');
        usersResult.rows.forEach(row => {
          console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
      } else {
        console.log('‚ùå –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã users:', error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ characters
    try {
      const charsResult = await client.query(`
        SELECT column_name, data_type, is_nullable, column_default 
        FROM information_schema.columns 
        WHERE table_schema = 'dev_schema' 
        AND table_name = 'characters' 
        AND column_name IN ('gender', 'ethnicity', 'height', 'weight', 'hair_color', 'eye_color', 'phone_number', 'postal', 'occupation', 'dead', 'date_of_dead', 'missing', 'arrested', 'callsign', 'callsign2', 'suspended', 'whitelist_status', 'radio_channel_id')
        ORDER BY column_name
      `);
      
      if (charsResult.rows.length > 0) {
        console.log('‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ characters –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ:');
        charsResult.rows.forEach(row => {
          console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`);
        });
      } else {
        console.log('‚ùå –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ characters –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã characters:', error.message);
    }
    
    console.log('\nüéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ dev_schema –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
    if (errorCount > 0) {
      console.log('\nüìã –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ï –°–ü–û–°–û–ë–´ –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ú–ò–ì–†–ê–¶–ò–ò:');
      console.log('1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Supabase Dashboard (SQL Editor)');
      console.log('2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ dev_schema');
      console.log('3. –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
      console.log('\nüìÑ SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:');
      console.log('='.repeat(50));
      allCommands.forEach((cmd, index) => {
        console.log(`${index + 1}. ${cmd}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  } finally {
    await pool.end();
  }
}

applyDevSchemaMigration()
  .then(() => {
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ dev_schema –∑–∞–≤–µ—Ä—à–µ–Ω');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –°–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫ dev_schema –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
    process.exit(1);
  }); 