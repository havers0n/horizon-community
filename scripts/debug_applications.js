import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || 'http://localhost:54321';
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function debugApplications() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –∑–∞—è–≤–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è candidate
    const { data: applications, error } = await supabase
      .from('applications')
      .select('*')
      .eq('author_id', 19);

    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫:', error.message);
      return;
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${applications.length}`);
    console.log('=====================================');

    applications.forEach((app, index) => {
      console.log(`${index + 1}. –ó–∞—è–≤–∫–∞ ID: ${app.id}`);
      console.log(`   –¢–∏–ø: ${app.type}`);
      console.log(`   –°—Ç–∞—Ç—É—Å: ${app.status}`);
      console.log(`   –°–æ–∑–¥–∞–Ω–∞: ${app.created_at}`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${app.updated_at}`);
      console.log(`   –ê–≤—Ç–æ—Ä ID: ${app.author_id}`);
      console.log('   ---');
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const now = new Date();
    const currentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
    console.log(`üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: ${currentMonth.toISOString()}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    const thisMonthApps = applications.filter(app => 
      new Date(app.created_at) >= currentMonth
    );

    console.log(`üìù –ó–∞—è–≤–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: ${thisMonthApps.length}`);
    thisMonthApps.forEach((app, index) => {
      console.log(`  ${index + 1}. ID: ${app.id}, –¢–∏–ø: ${app.type}, –°–æ–∑–¥–∞–Ω–∞: ${app.created_at}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    const entryApps = thisMonthApps.filter(app => app.type === 'entry');
    console.log(`üéØ –ó–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∑–∞ –º–µ—Å—è—Ü: ${entryApps.length}/3`);

    if (entryApps.length >= 3) {
      console.log('‚ùå –õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ò–°–ß–ï–†–ü–ê–ù!');
    } else {
      console.log('‚úÖ –õ–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –î–û–°–¢–£–ü–ï–ù!');
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ:', error.message);
  }
}

debugApplications().catch(console.error); 