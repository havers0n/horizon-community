import { useQuery, useQueryClient } from "@tanstack/react-query";
import { useAuth } from "../contexts/AuthContext";

interface CheckLimitResult {
  isLimitReached: boolean;
  isLoading: boolean;
  reason?: string;
  refetch: () => void;
}

export function useCheckLimit(type: string): CheckLimitResult {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  
  const {
    data,
    isLoading,
    isError,
    error,
    refetch
  } = useQuery({
    queryKey: ["/api/application-limits", type],
    queryFn: async () => {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞: ${type}`);
      console.log(`üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:`, user);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ localStorage
      const token = localStorage.getItem('auth_token') || localStorage.getItem('authToken') || localStorage.getItem('mockToken');
      console.log(`üîç –¢–æ–∫–µ–Ω:`, token ? '–ù–∞–π–¥–µ–Ω' : '–ù–µ –Ω–∞–π–¥–µ–Ω');
      
      const headers: Record<string, string> = {
        'Content-Type': 'application/json'
      };
      
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      
      try {
        const res = await fetch(`/api/application-limits/${encodeURIComponent(type)}`, {
          credentials: "include",
          headers
        });
        
        console.log(`üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:`, res.status);
        
        if (!res.ok) {
          const json = await res.json().catch(() => ({}));
          console.log(`‚ùå –û—à–∏–±–∫–∞ API:`, json);
          throw new Error(json.message || res.statusText);
        }
        
        const result = await res.json();
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤:`, result);
        return result;
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:`, error);
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏
        return { restriction: { allowed: true, reason: null } };
      }
    },
    enabled: !!type && !!user,
    staleTime: 30000, // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ 30 —Å–µ–∫—É–Ω–¥
    gcTime: 60000, // –ö—ç—à —Ö—Ä–∞–Ω–∏—Ç—Å—è 1 –º–∏–Ω—É—Ç—É
    refetchOnMount: true,
    refetchOnWindowFocus: false,
    retry: 1 // –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑
  });

  let isLimitReached = false;
  let reason: string | undefined = undefined;

  if (isError) {
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏
    isLimitReached = false;
    reason = undefined;
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏:`, (error as Error).message);
  } else if (data && data.restriction && data.restriction.allowed === false) {
    isLimitReached = true;
    reason = data.restriction.reason;
    console.log(`üö´ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω:`, reason);
  } else {
    isLimitReached = false;
    reason = undefined;
    console.log(`‚úÖ –õ–∏–º–∏—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:`, data?.restriction);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const forceRefetch = () => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤...');
    queryClient.invalidateQueries({ queryKey: ["/api/application-limits", type] });
    refetch();
  };

  return { isLimitReached, isLoading, reason, refetch: forceRefetch };
}
