import { BusinessLogic } from './businessLogic';
import { IStorage } from './storage';
import { Application } from '@roleplay-identity/shared-schema';

export interface SchedulerConfig {
  resetLimitsCron: string; // "0 0 1 * *" - 1 —á–∏—Å–ª–æ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 00:00
  leaveProcessingCron: string; // "0 9 * * *" - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
  timezone: string; // "Europe/Moscow"
}

export class Scheduler {
  private businessLogic: BusinessLogic;
  private storage: IStorage;
  private config: SchedulerConfig;
  private intervals: NodeJS.Timeout[] = [];

  constructor(businessLogic: BusinessLogic, storage: IStorage, config: SchedulerConfig) {
    this.businessLogic = businessLogic;
    this.storage = storage;
    this.config = config;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
   */
  start(): void {
    // –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞
    this.scheduleMonthlyReset();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    this.scheduleLeaveProcessing();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
   */
  stop(): void {
    this.intervals.forEach(interval => clearInterval(interval));
    this.intervals = [];
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤
   */
  private scheduleMonthlyReset(): void {
    const interval = setInterval(async () => {
      const now = new Date();
      if (now.getDate() === 1 && now.getHours() === 0 && now.getMinutes() === 0) {
        try {
          await this.businessLogic.resetMonthlyLimits();
        } catch (error) {
          console.error('‚ùå Error during monthly limits reset:', error);
        }
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    this.intervals.push(interval);
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ø—É—Å–∫–æ–≤
   */
  private scheduleLeaveProcessing(): void {
    const interval = setInterval(async () => {
      const now = new Date();
      if (now.getHours() === 9 && now.getMinutes() === 0) {
        try {
          await this.processLeaveApplications();
        } catch (error) {
          console.error('‚ùå Error during leave processing:', error);
        }
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    this.intervals.push(interval);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ç–ø—É—Å–∫
   */
  private async processLeaveApplications(): Promise<void> {
    const now = new Date();
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ç–ø—É—Å–∫
    const leaveApplications = await this.storage.getApplicationsByType('leave');
    const approvedLeaves = leaveApplications.filter(app => app.status === 'approved');

    for (const leaveApp of approvedLeaves) {
      try {
        const leaveData = leaveApp.data as any;
        const startDate = new Date(leaveData.startDate);
        const endDate = new Date(leaveData.endDate);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å "–û—Ç–ø—É—Å–∫"
        if (now >= startDate && now <= endDate) {
          await this.grantLeaveRole(leaveApp);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–Ω—è—Ç—å —Ä–æ–ª—å "–û—Ç–ø—É—Å–∫"
        if (now > endDate) {
          await this.revokeLeaveRole(leaveApp);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–Ω–∏
        if (leaveData.isPartialDay && leaveData.startTime && leaveData.endTime) {
          await this.processPartialDayLeave(leaveApp, now);
        }

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ—Ç–ø—É—Å–∫–∞—Ö
        await this.checkUpcomingLeaveNotifications(leaveApp, now);
      } catch (error) {
        console.error(`Error processing leave application ${leaveApp.id}:`, error);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –¥–Ω–µ–π –æ—Ç–ø—É—Å–∫–∞
   */
  private async processPartialDayLeave(leaveApp: Application, now: Date): Promise<void> {
    const leaveData = leaveApp.data as any;
    const startDate = new Date(leaveData.startDate);
    const endDate = new Date(leaveData.endDate);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤—Ö–æ–¥–∏—Ç –≤ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞
    if (now >= startDate && now <= endDate) {
      const today = now.toDateString();
      const startDateStr = startDate.toDateString();
      const endDateStr = endDate.toDateString();

      // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∞—á–∞–ª–æ –∏–ª–∏ –∫–æ–Ω–µ—Ü –æ—Ç–ø—É—Å–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
      if (today === startDateStr || today === endDateStr) {
        const currentTime = now.getHours() * 60 + now.getMinutes();
        const [startHour, startMinute] = leaveData.startTime.split(':').map(Number);
        const [endHour, endMinute] = leaveData.endTime.split(':').map(Number);
        const startTimeMinutes = startHour * 60 + startMinute;
        const endTimeMinutes = endHour * 60 + endMinute;

        // –í—ã–¥–∞–µ–º —Ä–æ–ª—å –≤ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if (currentTime >= startTimeMinutes && currentTime <= endTimeMinutes) {
          await this.grantLeaveRole(leaveApp);
        } else if (currentTime > endTimeMinutes) {
          // –°–Ω–∏–º–∞–µ–º —Ä–æ–ª—å –≤ –∫–æ–Ω—Ü–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
          await this.revokeLeaveRole(leaveApp);
        }
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –æ—Ç–ø—É—Å–∫–∞—Ö
   */
  private async checkUpcomingLeaveNotifications(leaveApp: Application, now: Date): Promise<void> {
    const leaveData = leaveApp.data as any;
    const startDate = new Date(leaveData.startDate);
    const daysUntilStart = Math.ceil((startDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞
    if (daysUntilStart === 3) {
      await this.storage.createNotification({
        recipientId: leaveApp.authorId,
        content: `–í–∞—à –æ—Ç–ø—É—Å–∫ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 –¥–Ω—è (${startDate.toLocaleDateString()}). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–µ–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã.`,
        link: '/leave-management',
        isRead: false
      });
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞
    if (daysUntilStart === 1) {
      await this.storage.createNotification({
        recipientId: leaveApp.authorId,
        content: `–í–∞—à –æ—Ç–ø—É—Å–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –†–æ–ª—å "–û—Ç–ø—É—Å–∫" –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
        link: '/leave-management',
        isRead: false
      });
    }
  }

  /**
   * –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ "–û—Ç–ø—É—Å–∫"
   */
  private async grantLeaveRole(leaveApp: Application): Promise<void> {
    const user = await this.storage.getUser(leaveApp.authorId);
    if (!user) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–¥–∞–Ω–∞ –ª–∏ —É–∂–µ —Ä–æ–ª—å
    if (user.status === 'on_leave') return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.storage.updateUser(leaveApp.authorId, {
      status: 'on_leave'
    });

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.storage.createNotification({
      recipientId: leaveApp.authorId,
      content: '–í–∞—à –æ—Ç–ø—É—Å–∫ –Ω–∞—á–∞–ª—Å—è. –†–æ–ª—å "–û—Ç–ø—É—Å–∫" –≤—ã–¥–∞–Ω–∞.',
      link: '/dashboard',
      isRead: false
    });

    console.log(`‚úÖ Leave role granted to user ${leaveApp.authorId}`);
  }

  /**
   * –°–Ω—è—Ç–∏–µ —Ä–æ–ª–∏ "–û—Ç–ø—É—Å–∫"
   */
  private async revokeLeaveRole(leaveApp: Application): Promise<void> {
    const user = await this.storage.getUser(leaveApp.authorId);
    if (!user) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–¥–∞–Ω–∞ –ª–∏ —Ä–æ–ª—å
    if (user.status !== 'on_leave') return;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.storage.updateUser(leaveApp.authorId, {
      status: 'active'
    });

    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await this.storage.createNotification({
      recipientId: leaveApp.authorId,
      content: '–í–∞—à –æ—Ç–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –†–æ–ª—å "–û—Ç–ø—É—Å–∫" —Å–Ω—è—Ç–∞.',
      link: '/dashboard',
      isRead: false
    });

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É
    await this.businessLogic.advanceApplicationStatus(
      leaveApp.id,
      'closed',
      0, // system user
      '–û—Ç–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
    );

    console.log(`‚úÖ Leave role revoked from user ${leaveApp.authorId}`);
  }

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async manualResetLimits(): Promise<void> {
    console.log('üîÑ Manual limits reset triggered...');
    await this.businessLogic.resetMonthlyLimits();
    console.log('‚úÖ Manual limits reset completed');
  }

  /**
   * –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  async manualProcessLeaves(): Promise<void> {
    console.log('üèñÔ∏è Manual leave processing triggered...');
    await this.processLeaveApplications();
    console.log('‚úÖ Manual leave processing completed');
  }
} 