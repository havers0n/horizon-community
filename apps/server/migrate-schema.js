import { Pool } from 'pg';
import { config } from 'dotenv';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
config({ path: resolve(__dirname, '../../../.env') });

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DATABASE_URL –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
process.env.DATABASE_URL = 'postgresql://postgres.axgtvvcimqoyxbfvdrok:TtaW3kLHu9xojVOt@aws-0-eu-north-1.pooler.supabase.com:5432/postgres';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_URL?.includes('supabase.com') ? { rejectUnauthorized: false } : false
});

async function migrateSchema() {
  const client = await pool.connect();
  
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ö–µ–º—ã –∏–∑ dev_schema –≤ public...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ dev_schema
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'dev_schema'
      ORDER BY table_name
    `);
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${tablesResult.rows.length} —Ç–∞–±–ª–∏—Ü –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`);
    
    for (const table of tablesResult.rows) {
      const tableName = table.table_name;
      console.log(`\nüîß –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É: ${tableName}`);
      
      try {
        // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ public —Å—Ö–µ–º–µ
        console.log(`   üìù –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã ${tableName}...`);
        const createTableResult = await client.query(`
          CREATE TABLE IF NOT EXISTS public.${tableName} AS 
          SELECT * FROM dev_schema.${tableName} WHERE 1=0
        `);
        
        // 2. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        console.log(`   üìä –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ ${tableName}...`);
        const copyResult = await client.query(`
          INSERT INTO public.${tableName} 
          SELECT * FROM dev_schema.${tableName}
        `);
        
        // 3. –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        const countResult = await client.query(`
          SELECT COUNT(*) as count FROM public.${tableName}
        `);
        
        console.log(`   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ (${countResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π)`);
        
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã ${tableName}:`, error.message);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    console.log('\nüîß –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è...');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–¥–µ–∫—Å–∞—Ö
    const indexesResult = await client.query(`
      SELECT 
        indexname,
        tablename,
        indexdef
      FROM pg_indexes 
      WHERE schemaname = 'dev_schema'
      ORDER BY tablename, indexname
    `);
    
    for (const index of indexesResult.rows) {
      try {
        const newIndexName = index.indexname.replace('dev_schema_', 'public_');
        const newIndexDef = index.indexdef
          .replace('dev_schema.', 'public.')
          .replace(index.indexname, newIndexName);
        
        await client.query(newIndexDef);
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: ${newIndexName}`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å ${index.indexname}: ${error.message}`);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (sequences)
    console.log('\nüîß –°–æ–∑–¥–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    const sequencesResult = await client.query(`
      SELECT sequence_name 
      FROM information_schema.sequences 
      WHERE sequence_schema = 'dev_schema'
    `);
    
    for (const seq of sequencesResult.rows) {
      try {
        const newSeqName = seq.sequence_name.replace('dev_schema_', 'public_');
        await client.query(`
          CREATE SEQUENCE IF NOT EXISTS public.${newSeqName}
        `);
        console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${newSeqName}`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${seq.sequence_name}: ${error.message}`);
      }
    }
    
    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const publicTablesResult = await client.query(`
      SELECT COUNT(*) as count 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `);
    
    console.log(`   - –¢–∞–±–ª–∏—Ü –≤ public: ${publicTablesResult.rows[0].count}`);
    
    const totalRecordsResult = await client.query(`
      SELECT 
        table_name,
        (SELECT COUNT(*) FROM public."${table.table_name}") as record_count
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    console.log('\nüìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:');
    for (const table of totalRecordsResult.rows) {
      console.log(`   - ${table.table_name}: ${table.record_count} –∑–∞–ø–∏—Å–µ–π`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –≤ public
async function checkPublicSchema() {
  const client = await pool.connect();
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É public...');
    
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    console.log(`üìã –¢–∞–±–ª–∏—Ü –≤ public: ${tablesResult.rows.length}`);
    
    if (tablesResult.rows.length > 0) {
      console.log('   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:');
      tablesResult.rows.forEach((row, index) => {
        console.log(`   ${index + 1}. ${row.table_name}`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  } finally {
    client.release();
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
const command = process.argv[2];

if (command === 'check') {
  checkPublicSchema();
} else {
  migrateSchema();
} 