import { config } from 'dotenv';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';
import { Pool } from 'pg';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
config({ path: resolve(__dirname, '../../.env') });

console.log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
console.log("DATABASE_URL:", process.env.DATABASE_URL ? "–ù–∞—Å—Ç—Ä–æ–µ–Ω" : "–ù–ï –ù–ê–°–¢–†–û–ï–ù");

if (!process.env.DATABASE_URL) {
  console.error("‚ùå DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
  process.exit(1);
}

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_URL?.includes('supabase.com') ? { rejectUnauthorized: false } : false,
});

try {
  console.log("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
  const client = await pool.connect();
  
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public
  console.log("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ —Å—Ö–µ–º–µ public...");
  const result = await client.query(`
    SELECT table_name 
    FROM information_schema.tables 
    WHERE table_schema = 'public' 
    ORDER BY table_name
  `);
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${result.rows.length} —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ public:`);
  result.rows.forEach(row => {
    console.log(`  - ${row.table_name}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É departments
  console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É departments...");
  const deptResult = await client.query(`
    SELECT COUNT(*) as count 
    FROM information_schema.tables 
    WHERE table_schema = 'public' AND table_name = 'departments'
  `);
  
  if (deptResult.rows[0].count > 0) {
    console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ departments –Ω–∞–π–¥–µ–Ω–∞!");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ departments
    const dataResult = await client.query('SELECT COUNT(*) as count FROM departments');
    console.log(`üìä –í —Ç–∞–±–ª–∏—Ü–µ departments: ${dataResult.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
  } else {
    console.log("‚ùå –¢–∞–±–ª–∏—Ü–∞ departments –ù–ï –Ω–∞–π–¥–µ–Ω–∞!");
  }
  
  client.release();
  await pool.end();
  
  console.log("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
  
} catch (error) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", error.message);
  process.exit(1);
} 