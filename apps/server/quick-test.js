import { Pool } from 'pg';

console.log("üîç –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...");

const pool = new Pool({
  connectionString: 'postgresql://postgres.axgtvvcimqoyxbfvdrok:TtaW3kLHu9xojVOt@aws-0-eu-north-1.pooler.supabase.com:5432/postgres',
  ssl: { rejectUnauthorized: false }
});

async function testDatabase() {
  try {
    console.log("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...");
    const client = await pool.connect();
    
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!");
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º departments
    console.log("\nüè¢ –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É departments...");
    const deptResult = await client.query('SELECT * FROM departments LIMIT 3');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${deptResult.rows.length} –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤:`);
    deptResult.rows.forEach((dept, index) => {
      console.log(`  ${index + 1}. ${dept.name} (${dept.full_name})`);
    });
    
    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º users
    console.log("\nüë• –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É users...");
    const userResult = await client.query('SELECT id, username, email, role FROM users LIMIT 3');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${userResult.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:`);
    userResult.rows.forEach((user, index) => {
      console.log(`  ${index + 1}. ${user.username} (${user.email}) - ${user.role}`);
    });
    
    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º characters
    console.log("\nüé≠ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É characters...");
    const charResult = await client.query('SELECT id, first_name, last_name, type FROM characters LIMIT 3');
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${charResult.rows.length} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:`);
    charResult.rows.forEach((char, index) => {
      console.log(`  ${index + 1}. ${char.first_name} ${char.last_name} (${char.type})`);
    });
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log("\nüìä –¢–µ—Å—Ç 4: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...");
    const statsResult = await client.query(`
      SELECT 
        (SELECT COUNT(*) FROM departments) as departments_count,
        (SELECT COUNT(*) FROM users) as users_count,
        (SELECT COUNT(*) FROM characters) as characters_count,
        (SELECT COUNT(*) FROM applications) as applications_count
    `);
    
    const stats = statsResult.rows[0];
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`  - –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã: ${stats.departments_count}`);
    console.log(`  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${stats.users_count}`);
    console.log(`  - –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: ${stats.characters_count}`);
    console.log(`  - –ó–∞—è–≤–∫–∏: ${stats.applications_count}`);
    
    client.release();
    await pool.end();
    
    console.log("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!");
    console.log("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", error.message);
    process.exit(1);
  }
}

testDatabase(); 