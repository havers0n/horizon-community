#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ø–µ—Ä–µ–≤–æ–¥–æ–≤
const localesPath = path.join(__dirname, '../locales');
const enPath = path.join(localesPath, 'en.json');
const ruPath = path.join(localesPath, 'ru.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞
function getAllKeys(obj, prefix = '') {
  const keys = [];
  
  for (const key in obj) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    
    if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
      keys.push(...getAllKeys(obj[key], fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  
  return keys;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É
function getValueByKey(obj, key) {
  const keys = key.split('.');
  let value = obj;
  
  for (const k of keys) {
    if (value && typeof value === 'object' && k in value) {
      value = value[k];
    } else {
      return undefined;
    }
  }
  
  return value;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkTranslations() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤...\n');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    const enTranslations = JSON.parse(fs.readFileSync(enPath, 'utf8'));
    const ruTranslations = JSON.parse(fs.readFileSync(ruPath, 'utf8'));
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
    const enKeys = getAllKeys(enTranslations);
    const ruKeys = getAllKeys(ruTranslations);
    
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: ${enKeys.length} –∫–ª—é—á–µ–π`);
    console.log(`   –†—É—Å—Å–∫–∏–π: ${ruKeys.length} –∫–ª—é—á–µ–π\n`);
    
    // –ù–∞—Ö–æ–¥–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
    const missingInRu = enKeys.filter(key => !ruKeys.includes(key));
    const missingInEn = ruKeys.filter(key => !enKeys.includes(key));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const emptyInEn = enKeys.filter(key => {
      const value = getValueByKey(enTranslations, key);
      return value === '' || value === null || value === undefined;
    });
    
    const emptyInRu = ruKeys.filter(key => {
      const value = getValueByKey(ruTranslations, key);
      return value === '' || value === null || value === undefined;
    });
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (missingInRu.length > 0) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –≤ —Ä—É—Å—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ:');
      missingInRu.forEach(key => console.log(`   - ${key}`));
      console.log('');
    }
    
    if (missingInEn.length > 0) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ:');
      missingInEn.forEach(key => console.log(`   - ${key}`));
      console.log('');
    }
    
    if (emptyInEn.length > 0) {
      console.log('‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ:');
      emptyInEn.forEach(key => console.log(`   - ${key}`));
      console.log('');
    }
    
    if (emptyInRu.length > 0) {
      console.log('‚ö†Ô∏è  –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä—É—Å—Å–∫–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ:');
      emptyInRu.forEach(key => console.log(`   - ${key}`));
      console.log('');
    }
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalIssues = missingInRu.length + missingInEn.length + emptyInEn.length + emptyInRu.length;
    
    if (totalIssues === 0) {
      console.log('‚úÖ –í—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!');
    } else {
      console.log(`üìà –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
      if (missingInRu.length > 0) {
        console.log(`   - –î–æ–±–∞–≤—å—Ç–µ ${missingInRu.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ ru.json`);
      }
      if (missingInEn.length > 0) {
        console.log(`   - –î–æ–±–∞–≤—å—Ç–µ ${missingInEn.length} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ en.json`);
      }
      if (emptyInEn.length > 0 || emptyInRu.length > 0) {
        console.log('   - –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
      }
    }
    
    return totalIssues === 0;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:', error.message);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
if (require.main === module) {
  const success = checkTranslations();
  process.exit(success ? 0 : 1);
}

module.exports = { checkTranslations }; 